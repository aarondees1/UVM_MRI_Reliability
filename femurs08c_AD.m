%#######################################################################
%
%                  * Femoral Cartilage Processing Program *
%                        (Script Name: femurs08c_AD)
%
%          This program reads digitized cartilage points from the femur,
%     transforms them into the previously established femoral bony
%     coordinate system, and generates plots. It specifically processes
%     and visualizes both coronal and sagittal cartilage data for the
%     medial and lateral compartments of a user-selected knee.
%
%     The script relies on the femoral coordinate system data (e.g.,
%     transformation matrix and origin) saved from a prior step
%     generated by 'femurs08b_AD'. The processed and transformed cartilage 
%     data, along with its mesh, are saved in a Matlab MAT file. Various 
%     plots, including raw MRI cartilage data, transformed cartilage data, 
%     and the transformed cartilage surface, are generated and saved as PDF
%     files. The 'sd' structure, containing subject and file path information, 
%     is updated and saved at the end of the process.
%
%     NOTES:  1.  The names of the regions of interest (ROIs) must
%             follow a specific convention.
%
%             2. The Matlab M-files fix_pts.m, li_clos.m, mk_tri6.m,
%             plane_fit.m, rd_roi6.m, rotxyz.m, tri_area.m, tri_fix2.m,
%             and tri_norm.m must be in the current directory or path.
%
%             3.  The femoral coordinate system, including the
%             coordinate transformation matrix and origin, is read from
%             a Matlab MAT file in the format ***_femurCS.mat
%             for a given subject, knee (left or right) and scan type
%             (e.g., 001_L_FFE_femurCS.mat).
%
%             4.  The angles between slice ends in the triangulation is
%             controlled by the angle input (in degrees) into mk_tri4f.m.
%             Typical angles are 5-15 degrees.
%
%             5.  This M-file outputs PDF files with plots of the
%             femoral cartilage following similar previous formats 
%             ***_femurs08c.pdf.
%
%             6.  The transformed data and mesh are saved in a Matlab
%             MAT file of similar previous formats **_femurCart.mat.
%
%     7-July-2025 * Mack Gardner-Morse & Aaron Dees
%
%#######################################################################
clear; % Clear all variables from workspace
close all; % Close all open figures
clc; % Clear command window
%
% Control Variables for Finding Duplicate Points
%
tol = 0.2; % Set minimum distance threshold for distinct points
iflag = true; % Enable flag to print duplicate point messages
%
% Femur Coordinate and Output PS and MAT File Names
%
csnam = '_femurCS.mat'; % Define suffix for femur coordinate system MAT file
psnam_suffix = '_femurs08c.pdf'; % Define suffix for PDF output file
mnam_suffix = '_femurCart.mat'; % Define suffix for cartilage MAT output file
%
% Regional Colors and Labels
%
fclrs = [0 0 0.7; 0 0.5 0; 0.7 0 0]; % Define colors: deep blue, dark green, red
%
fregs = ['lateral '
    'medial  '
    'trochlea']; % Define labels for femoral cartilage regions
%
% Get Sagittal Cartilage CSV File Name
%
div = uigetdir; % Open dialog to select base directory
ddir = fullfile(div); % Construct full path to selected directory
rdir = fullfile(div,'Results'); % Construct path to results directory
bdir = fullfile(rdir,'Bone'); % Construct path to bone data directory
cdir = fullfile(rdir, 'Cartilage'); % Construct path to cartilage data directory
tdir = fullfile(rdir,'Thickness'); % Construct path to thickness data directory
gdir = fullfile(rdir,'Grids'); % Construct path to grids directory
load(fullfile(rdir,'All Subjects Full Tibia and Femur Bone Data.mat')); % Load subject data from MAT file
ns=size(sd,1); % Get number of subjects
ffe_paths=strings(ns,1); % Initialize array for FFE scan paths
rho_paths=strings(ns,1); % Initialize array for RHO scan paths
t2s_paths=strings(ns,1); % Initialize array for T2S scan paths
for i=1:ns % Loop through each subject
    ffe_paths(i)=fullfile(sd(i).folder,'Visit 2','FFE'); % Set path for FFE scan directory
    rho_paths(i)=fullfile(sd(i).folder,'Visit 2','RHO'); % Set path for RHO scan directory
    t2s_paths(i)=fullfile(sd(i).folder,'Visit 2','T2S'); % Set path for T2S scan directory
%
    %Get FFE Femur Bone Names
    cnams=dir(fullfile(ffe_paths(i),'*_L_SAGAR_FEM*.csv')); % Find FFE sagittal cartilage CSV files
    cnams={cnams.name}; % Extract file names
    cnams=cnams(~contains(cnams,'dup','IgnoreCase',true)&~contains(cnams,'MGG')&~contains(cnams,'LD')&~contains(cnams,'RO.')); % Filter out unwanted files
    idx = contains(cnams,'_RO2'); % Check for files with '_RO2' suffix
    if any(idx) % If '_RO2' files exist
        idc = contains(cnams,'SAGAR'); % Identify files with 'SAGAR'
        idx = idx|~idc; % Combine '_RO2' and non-'SAGAR' files
        cnams = cnams(idx); % Filter file list
    end
    sd(i).FFE.femur.cfnam=char(cnams); % Store FFE cartilage file name in subject data
%
    %Get RHO Femur Bone Names
    cnams=dir(fullfile(rho_paths(i),'Femur','*_L_SAGAR_FEM*.csv')); % Find RHO sagittal cartilage CSV files
    cnams={cnams.name}; % Extract file names
    cnams=cnams(~contains(cnams,'dup','IgnoreCase',true)&~contains(cnams,'MGG')&~contains(cnams,'LD')&~contains(cnams,'RO.')); % Filter out unwanted files
    idx = contains(cnams,'_RO2'); % Check for files with '_RO2' suffix
    if any(idx) % If '_RO2' files exist
        idc = contains(cnams,'SAGAR'); % Identify files with 'SAGAR'
        idx = idx|~idc; % Combine '_RO2' and non-'SAGAR' files
        cnams = cnams(idx); % Filter file list
    end
    sd(i).RHO.femur.cfnam=char(cnams); % Store RHO cartilage file name in subject data
%
    %Get T2S Femur Bone Names
    cnams=dir(fullfile(t2s_paths(i),'Femur','*_L_SAGAR_FEM*.csv')); % Find T2S sagittal cartilage CSV files
    cnams={cnams.name}; % Extract file names
    cnams=cnams(~contains(cnams,'dup','IgnoreCase',true)&~contains(cnams,'MGG')&~contains(cnams,'LD')&~contains(cnams,'RO.')); % Filter out unwanted files
    idx = contains(cnams,'_RO2'); % Check for files with '_RO2' suffix
    if any(idx) % If '_RO2' files exist
        idc = contains(cnams,'SAGAR'); % Identify files with 'SAGAR'
        idx = idx|~idc; % Combine '_RO2' and non-'SAGAR' files
        cnams = cnams(idx); % Filter file list
    end
    sd(i).T2S.femur.cfnam=char(cnams); % Store T2S cartilage file name in subject data
%
end
ffe_paths=ffe_paths'; % Transpose FFE paths array
rho_paths=rho_paths'; % Transpose RHO paths array
t2s_paths=t2s_paths'; % Transpose T2S paths array
clear idc; % Clear temporary variable
if ~isfolder(cdir) % Check if cartilage directory exists
    mkdir(cdir); % Create cartilage directory if it doesn't exist
end
for i=1:ns % Loop through each subject
    for j=1:3 % Loop through scan types (FFE, RHO, T2S)
        if j==1 % Check for FFE scan type
            fstr=sd(i).FFE.femur.cfnam; % Get FFE cartilage file name
            fstr=[fstr(1:6) fstr(17:19)]; % Extract subject ID and scan suffix
            coord_path=fullfile(bdir,[fstr csnam]); % Construct path to coordinate system MAT file
            cart_path=fullfile(ffe_paths(i),sd(i).FFE.femur.cfnam); % Construct path to FFE cartilage CSV file
%
        elseif j==2 % Check for RHO scan type
            fstr=sd(i).RHO.femur.cfnam; % Get RHO cartilage file name
            fstr=[fstr(1:6) fstr(17:19)]; % Extract subject ID and scan suffix
            coord_path=fullfile(bdir,[fstr csnam]); % Construct path to coordinate system MAT file
            cart_path=fullfile(rho_paths(i),'Femur',sd(i).RHO.femur.cfnam); % Construct path to RHO cartilage CSV file
%
        elseif j==3 % Check for T2S scan type
            fstr=sd(i).T2S.femur.cfnam; % Get T2S cartilage file name
            fstr=[fstr(1:6) fstr(17:19)]; % Extract subject ID and scan suffix
            coord_path=fullfile(bdir,[fstr csnam]); % Construct path to coordinate system MAT file
            cart_path=fullfile(t2s_paths(i),'Femur',sd(i).T2S.femur.cfnam); % Construct path to T2S cartilage CSV file
%
        end
        % Get Femoral Coordinate System
        fcs = load(fullfile(bdir, [fstr csnam]),'xyzc','xyzr'); % Load coordinate system data from MAT file
        xyzc = fcs.xyzc; % Extract origin coordinates
        xyzr = fcs.xyzr; % Extract rotation matrix
        %
        % Full PostScript File Name
        %
        psnam = [fstr psnam_suffix]; % Construct PDF file name with suffix
        psnam = fullfile(cdir,psnam); % Construct full path to PDF file
        %
        % Get Raw Femur Sagittal Cartilage Data
        %
        roi = rd_roi6(cart_path); % Read cartilage ROI data from CSV file
        roinams = {roi.name}'; % Extract ROI names into cell array
        ids(3) = find(startsWith(roinams,'TRO')); % Find index of trochlea ROI
        ids(2) = find(startsWith(roinams,'MED')); % Find index of medial condyle ROI
        ids(1) = find(startsWith(roinams,'LAT')); % Find index of lateral condyle ROI
        %
        datlc = roi(ids(1)).data'; % Extract lateral condyle cartilage data
        datmc = roi(ids(2)).data'; % Extract medial condyle cartilage data
        dattc = roi(ids(3)).data'; % Extract trochlea cartilage data
        %
        % Raw Data Figure
        %
        hf1 = figure; % Create new figure for raw cartilage data
        orient landscape; % Set figure orientation to landscape
        view(3); % Set 3D view
        hold on; % Enable hold for multiple plots
        xlabel('X (mm)','FontSize',12,'FontWeight','bold'); % Label X-axis
        ylabel('Y (mm)','FontSize',12,'FontWeight','bold'); % Label Y-axis
        zlabel('Z (mm)','FontSize',12,'FontWeight','bold'); % Label Z-axis
        title({[fstr ' - MRI CS']; ['Blue - Lateral, Green - Medial']},'FontSize',16,'FontWeight','bold','Interpreter','none'); % Add title with color legend
        %
        % Transformed Data Figure
        %
        hf2 = figure; % Create new figure for transformed cartilage data
        orient landscape; % Set figure orientation to landscape
        view(3); % Set 3D view
        hold on; % Enable hold for multiple plots
        xlabel('AP (mm)','FontSize',12,'FontWeight','bold'); % Label X-axis (anterior-posterior)
        ylabel('Lateral (mm)','FontSize',12,'FontWeight','bold'); % Label Y-axis
        zlabel('Superior (mm)','FontSize',12,'FontWeight','bold'); % Label Z-axis
        title([fstr ' - Femoral CS'],'FontSize',16,'FontWeight','bold','Interpreter','none'); % Add title with subject ID
        %
        % Loop through Regions
        % (Lateral [l==1], Medial [l==2] and Trochlea [l==3])
        %
        for l = 1:3 % Loop through lateral, medial, and trochlea regions
            %
            % Get Data
            %
            eval(['dat1 = dat' fregs(l,1) 'c;']); % Dynamically extract region data
            nsl1 = size(dat1,1); % Get number of slices in region
            %
            % Check for Duplicates, Direction of Digitization and Transform Data to
            % Femur Coordinate System
            %
            datt = cell(nsl1,1); % Initialize cell array for transformed data
            %
            for n = 1:nsl1 % Loop through each slice
                xyz = dat1{n}; % Extract coordinates for current slice
                if isempty(xyz) % Check if slice data is empty
                    reg = deblank(fregs(l,:)); % Get region name without trailing spaces
                    error([' *** ERROR in femurs08c:  No coordinates for ','slice ' int2str(n) ' in ' reg ' region!']); % Throw error for empty slice
                end
                xyz = fix_pts_AD(xyz,tol,iflag,fstr); % Remove duplicate points using tolerance
                npts = size(xyz,1); % Get number of points in slice
                [~,imx] = max(xyz(:,2)); % Find index of maximum Y-coordinate
                [~,imn] = min(xyz(:,2)); % Find index of minimum Y-coordinate
                if imn<imx % Check digitization direction
                    xyz = xyz(1:npts,:); % Keep anterior-to-posterior order
                else
                    xyz = xyz(npts:-1:1,:); % Reverse to anterior-to-posterior order
                end
                xyzt = xyz-repmat(xyzc,npts,1); % Center data relative to coordinate origin
                xyzt = xyzt*xyzr; % Transform data to femoral coordinate system
                datt{n} = xyzt; % Store transformed data for slice
                %
                % Plot Raw Data
                %
                figure(hf1); % Select raw data figure
                %
                plot3(xyz(:,1),xyz(:,2),xyz(:,3),'k.-','Color',fclrs(l,:),'MarkerSize',8,'LineWidth',1); % Plot raw slice data in region color
                if xyz(1,2)<0 % Check Y-position for label placement
                    text(xyz(1,1),xyz(1,2)-0.5,xyz(1,3),int2str(n),'Color','k','FontSize',10); % Add slice number below point
                else
                    text(xyz(1,1),xyz(1,2)+0.5,xyz(1,3),int2str(n),'Color','k','FontSize',10); % Add slice number above point
                end
                %
                % Plot Transformed Data
                %
                figure(hf2); % Select transformed data figure
                %
                plot3(xyzt(:,1),xyzt(:,2),xyzt(:,3),'k.-','Color',fclrs(l,:),'MarkerSize',8,'LineWidth',1); % Plot transformed slice data in region color
                if xyzt(1,1)<0 % Check X-position for label placement
                    text(xyzt(1,1)-0.5,xyzt(1,2),xyzt(1,3),int2str(n),'Color','k','FontSize',10); % Add slice number left of point
                else
                    text(xyzt(1,1)+0.5,xyzt(1,2),xyzt(1,3),int2str(n),'Color','k','FontSize',10); % Add slice number right of point
                end
                %
            end
            %
            % Save Data into Compartment Specific Variables
            %
            eval(['dat' fregs(l,1) 'ct = datt;']); % Store transformed data in region-specific variable
            %
            clear datt; % Clear temporary transformed data
            %
        end
        set(hf1, 'units','normalized','outerposition',[0 0 1 1]); % Maximize raw data figure window
        set(hf2, 'units','normalized','outerposition',[0 0 1 1]); % Maximize transformed data figure window
        exportgraphics(hf1, psnam, "Resolution", 300); % Export raw data plot to PDF
        exportgraphics(hf2, psnam, "Resolution", 300, 'Append', true); % Append transformed data plot to PDF
        close(hf1); % Close raw data figure
        close(hf2); % Close transformed data figure
        %
        % Combine Regions
        %
        datfc = comb_dat(datlct,datmct,dattct); % Combine transformed data from all regions
        %
        % Get Surface Triangulation
        %
        
        trifc = mk_tri4f(datfc,15); % Create triangular mesh with 15-degree angle smoothing
        xyzfc = cell2mat(datfc); % Convert combined data to matrix
        trifc = tri_fix2(trifc,xyzfc); % Fix triangulation errors
        %
        % Plot Transformed Cartilage Surface Data
        %
        hf3 = figure; % Create new figure for cartilage surface
        orient landscape; % Set figure orientation to landscape
        %
        trisurf(trifc,xyzfc(:,1),xyzfc(:,2),xyzfc(:,3),'FaceColor','interp','EdgeColor',fclrs(1,:),'LineWidth',1); % Plot triangulated cartilage surface
        axis equal; % Set equal scaling for axes
        xlabel('AP (mm)','FontSize',12,'FontWeight','bold'); % Label X-axis (anterior-posterior)
        ylabel('Lateral (mm)','FontSize',12,'FontWeight','bold'); % Label Y-axis
        zlabel('Superior (mm)','FontSize',12,'FontWeight','bold'); % Label Z-axis
        title([fstr ' - Femoral CS'],'FontSize',16,'FontWeight','bold','Interpreter','none'); % Add title with subject ID
        %
        % Save Data into a Matlab MAT File for Further Processing
        %
        mnam = [fstr mnam_suffix]; % Construct MAT file name with suffix
        mnam = fullfile(cdir,mnam); % Construct full path to MAT file
        kid=fstr(1:5); % Extract knee identifier
        ileg=false; % Set leg indicator to false (left knee)
        %
        save(mnam,'datlc','datlct','datmc','datmct','dattc','dattct','kid','ileg','trifc','xyzfc'); % Save cartilage data to MAT file
        %
        set(hf3, 'units','normalized','outerposition',[0 0 1 1]); % Maximize cartilage surface figure window
        exportgraphics(hf3, psnam,"Resolution", 300, 'Append', true); % Append cartilage surface plot to PDF
        close(hf3); % Close cartilage surface figure
    end
end
main_file=fullfile(rdir, 'All Subjects Full Tibia and Femur Bone and Cartilage Data.mat'); % Construct path to main MAT file
save (main_file, 'sd'); % Save subject data to main MAT file
return % Exit the script