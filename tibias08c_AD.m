%#######################################################################
%
%           * Tibia Cartilage Data Processing and Visualization in Tibial Coordinate System *
%                         (Script Name: tibias08c_AD)
%
%          This program guides the user to select a data directory for
%     cartilage files, then reads and transforms digitized cartilage
%     points to the previously established bony tibia coordinate system.
%     It is designed to run after 'tibias08b_AD', utilizing the processed
%     bone data generated by that script.
%     It plots both medial and lateral compartment cartilage data
%     for user-selected knees. The processed cartilage data, meshes, and 
%     plots are saved to MAT and PDF files, respectively. The 'sd' structure, 
%     containing updated subject data, is also saved for subsequent scripts.
%
%     NOTES:  1.  The names of the regions of interest (ROIs) must
%             follow a specific convention.
%
%             2. The Matlab M-files fix_pts.m, li_clos.m, mk_tri6.m,
%             plane_fit.m, rd_roi4.m, rotxyz.m, tri_area.m, tri_fix2.m
%             and tri_norm.m must be in the current directory or path.
%
%             3.  The tibia coordinate system with the coordinate
%             transformation matrix and origin are read from the
%             directory of the knee data from the Matlab MAT file,
%             ***_tibiaCS.mat for a given subject, knee (left or right) and scan
%             type (e.g. 001_L_FFE_tibiaCS.mat).
%
%             4.  This M-file outputs a pdf file of similar format,
%             ***_tibias08c.pdf, with plots of the tibial cartilage into
%             the directory of the knee data.
%
%             5.  The transformed data and mesh are saved in a Matlab
%             MAT file of similar format ***_tibiaCart.mat.
%
%     7-July-2025 * Mack Gardner-Morse & Aaron Dees
%
%#######################################################################
clear; % Clear all variables from the workspace
close all; % Close all open figures
clc; % Clear the command window
%
% Control Variables for Finding Duplicate Points
%
tol = 0.2; % Minimum distance between distinct points to identify duplicates
iflag = true; % Flag to print a message if duplicate points are found
%
% Tibial Coordinate and Output PDF and MAT File Names
%
csnam = '_tibiaCS.mat'; % Suffix for tibia coordinate system MAT file
psnam_suffix = '_tibias08c.pdf'; % Suffix for output PDF file
mnam_suffix = '_tibiaCart.mat'; % Suffix for output MAT file
%

%
% Compartment Colors and Labels
%
tclrs = [0 0 0.7; 0 0.5 0]; % Color definitions: deep blue for lateral, dark green for medial
%
tcmpt = ['lateral'
    'medial ']; % Labels for the tibial compartments
%
% Get Sagittal Cartilage CSV File Name
%
div = uigetdir; % Prompt user to select a directory containing subject data
rdir = fullfile(div,'Results'); % Construct path to results directory

load(fullfile(rdir,'All Subjects Tibia Bone Data.mat')); % Load subject data from MAT file
ns=size(sd,1); % Number of subjects
% Initialize arrays to store paths for each subject
ffe_paths=strings(ns,1);
rho_paths=strings(ns,1);
t2s_paths=strings(ns,1);
% Loop through each subject to collect file paths
for i=1:ns
    ffe_paths(i)=fullfile(sd(i).folder,'Visit 2','FFE'); % Path to FFE data
    rho_paths(i)=fullfile(sd(i).folder,'Visit 2','RHO'); % Path to RHO data
    t2s_paths(i)=fullfile(sd(i).folder,'Visit 2','T2S'); % Path to T2S data

    % Get FFE Tibia Bone Names
    cnams=dir(fullfile(ffe_paths(i),'*_L_SAGAR_TIB*.csv')); % Find sagittal cartilage CSV files
    cnams={cnams.name};
    % Filter out files with 'dup', 'MGG', 'LD', or 'RO.' in the name for
    % duplicates, Mack's tests, loaded conditions, and overlap files
    cnams=cnams(~contains(cnams,'dup','IgnoreCase',true)& ...
        ~contains(cnams,'MGG')&~contains(cnams,'LD')&~contains(cnams,'RO.'));
    idx = contains(cnams,'_RO2'); % Check for _RO2 files
    if any(idx)
        idc = contains(cnams,'SAGAR');
        idx = idx|~idc;
        cnams = cnams(idx); % Keep _RO2 or non-SAGAR files
    end
    sd(i).FFE.tibia.cfnam=char(cnams); % Store filtered FFE cartilage file name

    % Get RHO Tibia Bone Names
    cnams=dir(fullfile(rho_paths(i),'Tibia','*_L_SAGAR_TIB*.csv')); % Find RHO sagittal cartilage CSV files
    cnams={cnams.name};
    % Filter out files with 'dup', 'MGG', 'LD', or 'RO.' in the name for
    % duplicates, Mack's tests, loaded conditions, and overlap files
    cnams=cnams(~contains(cnams,'dup','IgnoreCase',true)& ...
        ~contains(cnams,'MGG')&~contains(cnams,'LD')&~contains(cnams,'RO.'));
    idx = contains(cnams,'_RO2'); % Check for _RO2 files
    if any(idx)
        idc = contains(cnams,'SAGAR');
        idx = idx|~idc;
        cnams = cnams(idx); % Keep _RO2 or non-SAGAR files
    end
    sd(i).RHO.tibia.cfnam=char(cnams); % Store filtered RHO cartilage file name

    % Get T2S Tibia Bone Names
    cnams=dir(fullfile(t2s_paths(i),'Tibia','*_L_SAGAR_TIB*.csv')); % Find T2S sagittal cartilage CSV files
    cnams={cnams.name};
    % Filter out files with 'dup', 'MGG', 'LD', or 'RO.' in the name for
    % duplicates, Mack's tests, loaded conditions, and overlap files
    cnams=cnams(~contains(cnams,'dup','IgnoreCase',true)& ...
        ~contains(cnams,'MGG')&~contains(cnams,'LD')&~contains(cnams,'RO.'));
    idx = contains(cnams,'_RO2'); % Check for _RO2 files
    if any(idx)
        idc = contains(cnams,'SAGAR');
        idx = idx|~idc;
        cnams = cnams(idx); % Keep _RO2 or non-SAGAR files
    end
    sd(i).T2S.tibia.cfnam=char(cnams); % Store filtered T2S cartilage file name
end
ffe_paths=ffe_paths'; % Transpose FFE paths
rho_paths=rho_paths'; % Transpose RHO paths
t2s_paths=t2s_paths'; % Transpose T2S paths
clear idc; % Clear temporary variable

%%
cdir = fullfile(rdir,'Cartilage'); % Define path for cartilage results directory
if ~isfolder(cdir)
    mkdir(cdir); % Create cartilage directory if it doesn't exist
end

% Loop through each subject
for i=1:ns
    % Loop through FFE, RHO, and T2S data
    for j=1:3

        % Get Tibial Coordinate System
        if j==1
            fstr=sd(i).FFE.tibia.cfnam; % FFE cartilage file name
            fstr=[fstr(1:6) fstr(17:19)]; % Extract identifier from file name
            coord_path=fullfile(rdir,'Bone',[fstr csnam]); % Path to coordinate system MAT file
            cart_path=fullfile(ffe_paths(i),sd(i).FFE.tibia.cfnam); % Path to FFE cartilage file

        elseif j==2
            fstr=sd(i).RHO.tibia.cfnam; % RHO cartilage file name
            fstr=[fstr(1:6) fstr(17:19)]; % Extract identifier from file name
            coord_path=fullfile(rdir,'Bone',[fstr csnam]); % Path to coordinate system MAT file
            cart_path=fullfile(rho_paths(i),'Tibia',sd(i).RHO.tibia.cfnam); % Path to RHO cartilage file
        
        elseif j==3
            fstr=sd(i).T2S.tibia.cfnam; % T2S cartilage file name
            fstr=[fstr(1:6) fstr(17:19)]; % Extract identifier from file name
            coord_path=fullfile(rdir,'Bone',[fstr csnam]); % Path to coordinate system MAT file
            cart_path=fullfile(t2s_paths(i),'Tibia',sd(i).T2S.tibia.cfnam); % Path to T2S cartilage file
        end
        % Load tibia coordinate system data
        tcs = load(fullfile(rdir,'Bone',[fstr csnam]),'xyzc','xyzr');
        xyzc = tcs.xyzc; % Origin of tibia coordinate system
        xyzr = tcs.xyzr; % Rotation matrix for tibia coordinate system
        %
        % Full PS File Name
        %
        psnam = [fstr psnam_suffix]; % Construct PDF file name
        psnam = fullfile(cdir,psnam); % Construct full path for PDF
       
        % Get Raw Tibia Cartilage Data
        roi = rd_roi6(cart_path); % Read region of interest data from CSV
        roinams = upper(char(roi.name)); % Convert ROI names to uppercase
        idc(2) = find(strcmp('MACS',cellstr(roinams))); % Find index for medial compartment
        idc(1) = find(strcmp('LACS',cellstr(roinams))); % Find index for lateral compartment
        dtxt = 'Sagittal Digitization'; % Label for digitization type
        %
        % Raw Data Figure
        %
        % Create a new figure for raw data
        hf1 = figure;
        orient landscape; % Set figure orientation to landscape
        view(3); % Set 3D view
        hold on; % Allow multiple plots
        xlabel('X (mm)','FontSize',12,'FontWeight','bold'); % Label X-axis
        ylabel('Y (mm)','FontSize',12,'FontWeight','bold'); % Label Y-axis
        zlabel('Z (mm)','FontSize',12,'FontWeight','bold'); % Label Z-axis
        % Add title to raw data plot
        title({[fstr ' - MRI CS FIXEDPTS']; dtxt; ['Blue - Lateral, Green - ', ...
            'Medial']},'FontSize',16,'FontWeight','bold', ...
            'Interpreter','none');
        %
        % Transformed Data Figure
        %
        % Create a new figure for transformed data
        hf2 = figure;
        orient landscape; % Set figure orientation to landscape
        view(3); % Set 3D view
        hold on; % Allow multiple plots
        xlabel('AP (mm)','FontSize',12,'FontWeight','bold'); % Label X-axis (anterior-posterior)
        ylabel('Lateral (mm)','FontSize',12,'FontWeight','bold'); % Label Y-axis
        zlabel('Superior (mm)','FontSize',12,'FontWeight','bold'); % Label Z-axis
        % Add title to transformed data plot
        title({[fstr ' - Tibial CS FIXEDPTS']; dtxt}, ...
            'FontSize',16,'FontWeight','bold','Interpreter','none');
        %
        % Loop through Compartments (Lateral [l==1] and Medial [l==2])
        %
        for l = 1:2 % Lateral = 1 and medial = 2
            %
            % Get Data
            %
            dat1 = roi(idc(l)).data'; % Extract data for the current compartment
            nsl1 = size(dat1,1); % Number of slices in the data
            %
            % Check for Duplicates, Direction of Digitization and Transform Data to
            % Tibia Coordinate System
            %
            datt = cell(nsl1,1); % Initialize cell array for transformed data
            %
            % Process each slice
            for n = 1:nsl1
                xyz = dat1{n}; % Get coordinates for the current slice
                % Check if slice data is empty
                if isempty(xyz)
                    cmprt = deblank(tcmpt(l,:)); % Get compartment name
                    % Throw error if no coordinates are found
                    error([' *** ERROR in tibias08c:  No coordinates for ', ...
                        dtxt ' slice ' int2str(n) ' in ' cmprt, ...
                        'compartment!']);
                end
                % Remove duplicate points
                xyz = fix_pts_AD(xyz,tol,iflag,fstr);
                npts = size(xyz,1); % Number of points in the slice
                [~,imx] = max(xyz(:,2)); % Find index of maximum Y-coordinate
                [~,imn] = min(xyz(:,2)); % Find index of minimum Y-coordinate
                % Ensure anterior-to-posterior ordering
                if imn<imx
                    xyz = xyz(1:npts,:); % Keep order if already anterior to posterior
                else
                    xyz = xyz(npts:-1:1,:); % Reverse order to anterior to posterior
                end
                xyzt = xyz-repmat(xyzc,npts,1); % Center data by subtracting origin
                xyzt = xyzt*xyzr; % Transform data to tibia coordinate system
                datt{n} = xyzt; % Store transformed data
                %
                % Plot Raw Data
                %
                figure(hf1); % Switch to raw data figure
                %
                % Plot raw data points with compartment-specific color
                plot3(xyz(:,1),xyz(:,2),xyz(:,3),'k.-','Color',tclrs(l,:), ...
                    'MarkerSize',8,'LineWidth',1);
                % Add slice number label
                if xyz(1,2)<0
                    text(xyz(1,1),xyz(1,2)-0.5,xyz(1,3),int2str(n), ...
                        'Color','k','FontSize',10);
                else
                    text(xyz(1,1),xyz(1,2)+0.5,xyz(1,3),int2str(n), ...
                        'Color','k','FontSize',10);
                end
                %
                % Plot Transformed Data
                %
                figure(hf2); % Switch to transformed data figure
                %
                % Plot transformed data points with compartment-specific color
                plot3(xyzt(:,1),xyzt(:,2),xyzt(:,3),'k.-','Color', ...
                    tclrs(l,:),'MarkerSize',8,'LineWidth',1);
                % Add slice number label
                if xyzt(1,1)<0
                    text(xyzt(1,1)-0.5,xyzt(1,2),xyzt(1,3),int2str(n), ...
                        'Color','k','FontSize',10);
                else
                    text(xyzt(1,1)+0.5,xyzt(1,2),xyzt(1,3),int2str(n), ...
                        'Color','k','FontSize',10);
                end
            end
            %
            % Get Surface Triangulation
            %
            trit = mk_tri6(datt); % Create triangulation for the compartment
            xyzt = cell2mat(datt); % Convert cell array to matrix
            trit = tri_fix2(trit,xyzt); % Fix triangulation issues
            %
            % Save Data into Compartment Specific Variables
            %
            % Store data in compartment-specific variables
            eval(['dat' tcmpt(l,1) ' = datt;']);
            eval(['tri' tcmpt(l,1) ' = trit;']);
            eval(['xyz' tcmpt(l,1) ' = xyzt;']);

            clear datt trit xyzt; % Clear temporary variables
        end

        %
        % Save Plots
        %
        % Maximize figure windows
        set(hf1, 'units','normalized','outerposition',[0 0 1 1]);
        set(hf2, 'units','normalized','outerposition',[0 0 1 1]);
        % Export raw and transformed data plots to PDF
        exportgraphics(hf1, psnam, "Resolution", 300);
        exportgraphics(hf2, psnam, "Resolution", 300, 'Append', true);
        close(hf1); % Close raw data figure
        close(hf2); % Close transformed data figure
        %
        % Plot Transformed Cartilage Surface Data
        %
        % Create a new figure for surface data
        hf3 = figure;
        orient landscape; % Set figure orientation to landscape
        %

        % Plot lateral compartment surface
        trisurf(tril,xyzl(:,1),xyzl(:,2),xyzl(:,3),'FaceColor', ...
            'interp','EdgeColor',tclrs(1,:),'LineWidth',1);
        hold on;
        % Plot medial compartment surface
        trisurf(trim,xyzm(:,1),xyzm(:,2),xyzm(:,3),'FaceColor', ...
            'interp','EdgeColor',tclrs(2,:),'LineWidth',1);

        axis equal; % Set equal scaling for axes
        xlabel('AP (mm)','FontSize',12,'FontWeight','bold'); % Label X-axis
        ylabel('Lateral (mm)','FontSize',12,'FontWeight','bold'); % Label Y-axis
        zlabel('Superior (mm)','FontSize',12,'FontWeight','bold'); % Label Z-axis
        % Add title to surface plot
        title({[fstr ' - Tibial CS FIXEDPTS']; dtxt}, ...
            'FontSize',16,'FontWeight','bold','Interpreter','none');
        %
        % Maximize figure window
        set(hf3, 'units','normalized','outerposition',[0 0 1 1]);
        % Append surface plot to PDF
        exportgraphics(hf3, psnam,"Resolution", 300, 'Append', true);
        close(hf3); % Close surface figure
        %
        % Save Data into a Matlab MAT File for Further Processing
        %
        mnam = [fstr mnam_suffix]; % Construct MAT file name
        mnam = fullfile(cdir,mnam); % Construct full path for MAT file
        kid=fstr(1:5); % Extract knee identifier
        ileg=false; % Flag for leg (not used in this context)
        %
        % Save data to MAT file
        save(mnam,'datl',"mnam",'datm','kid','ileg', ...
            'tril','trim','xyzl', 'xyzm');
        %
    end
end
% Save subject data to a MAT file
main_file=fullfile(rdir, 'All Subjects Tibia Bone And Cartilage Data.mat');
save (main_file, 'sd');
return % End of script
