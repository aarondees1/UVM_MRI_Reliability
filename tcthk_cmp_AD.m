%#######################################################################
%
%           * Tibia Cartilage THicKness Comparison Program *
%                         (Script Name: tcthk_cmp_AD)
%
%          This program compares tibial cartilage thicknesses obtained
%     from different scan types (T1FFE, T1rho, T2S). It reads the
%     previously calculated cartilage thicknesses, finds a combined grid
%     that covers all data sets, and calculates the differences in
%     thicknesses across scan types (e.g., T1rho - T1FFE, T2S - T1FFE).
%     This script is designed to be run after 'tcart08_sag_AD', as it 
%     relies on the '***_tcart08_thk.mat' thickness files and
%     'scanType_tgrid08_.mat' grid files generated by those scripts.
%
%     The program generates and saves comprehensive plots showing:
%     1. Individual cartilage thickness maps for each scan type.
%     2. Cartilage thickness difference maps between scan types.
%     3. Plots illustrating the distribution of thickness differences with
%        mean and standard deviation lines, categorized by regions.
%     4. Group-averaged mean thickness difference maps, standard deviation
%        maps, and maps showing the number of subjects contributing data.
%
%     All plots are saved as PDF files into the 'Results' directory
%     under a dynamically named file, e.g., 'Tibial Thickness Differences.pdf'.
%     Additionally, regional thickness data (T1FFE, T1rho, T2S) is
%     exported to Excel (.xlsx) files for each specific region
%     (e.g., 'tib_lat_pos.xlsx').
%
%     NOTES:  1. Both input grids (e.g., FFE_tgrid08_.mat, RHO_tgrid08_.mat,
%             T2S_tgrid08_.mat) must have integer coordinates. These
%             are generated by 'tcart08_ssag_AD'.
%
%             2. The script expects the 'All Subjects Tibia Cartilage Thickness Data.mat' file
%             (containing the 'sd' structure) to be present in the
%             'Results' directory, as this provides the necessary
%             subject and file path information.
%
%             3. Output PDF files include individual subject thickness plots
%             and group-level statistical plots.
%
%             4. Output Excel files are generated for each regional
%             division of the cartilage, containing raw thickness values
%             for each subject and scan type.
%
%     7-July-2025 * Mack Gardner-Morse & Aaron Dees
%
%#######################################################################
%%
clear; % Clear all variables from the workspace
close all; % Close all open figures
clc; % Clear the command window
grayColor = [.7 .7 .7]; % Define gray color for plotting (RGB: 0.7, 0.7, 0.7)
alphabet = [char(65:90)]; % Create array of uppercase alphabet characters (A-Z)

div = uigetdir; % Prompt user to select a directory containing subject data
ddir = fullfile(div); % Construct full path to the selected directory
rdir = fullfile(div,'Results'); % Construct path to the results subdirectory
tdir = fullfile(rdir,'Thickness'); % Construct path to the thickness results subdirectory
gdir = fullfile(rdir,'Grids'); % Construct path to the grids subdirectory
load(fullfile(rdir,'All Subjects Tibia Cartilage Thickness Data.mat')); % Load subject data from MAT file
ns=size(sd,1); % Get number of subjects from the size of the subject data array

%%
%
% Get Analysis Grids
%
ffeg = load(fullfile(gdir,'FFE_tgrid08_.mat')); % Load T1FFE grid data from MAT file
rhog = load(fullfile(gdir,'RHO_tgrid08_.mat')); % Load T1rho grid data from MAT file
t2sg = load(fullfile(gdir,'T2S_tgrid08_.mat')); % Load T2S grid data from MAT file

%%%
%
% Get Coordinates and Ranges for Lateral Compartment
%
xql_ffe = ffeg.xql; % Extract X coordinates for T1FFE lateral grid
yql_ffe = ffeg.yql; % Extract Y coordinates for T1FFE lateral grid
%
xql_rho = rhog.xql; % Extract X coordinates for T1rho lateral grid
yql_rho = rhog.yql; % Extract Y coordinates for T1rho lateral grid
%
xql_t2s = t2sg.xql; % Extract X coordinates for T2S lateral grid
yql_t2s = t2sg.yql; % Extract Y coordinates for T2S lateral grid
%
xmin_ffe = min(xql_ffe); % Find minimum X coordinate for T1FFE lateral grid
xmax_ffe = max(xql_ffe); % Find maximum X coordinate for T1FFE lateral grid
nc_ffe = ffeg.nxl; % Get number of columns in T1FFE lateral grid
%
xmin_rho = min(xql_rho); % Find minimum X coordinate for T1rho lateral grid
xmax_rho = max(xql_rho); % Find maximum X coordinate for T1rho lateral grid
nc_rho = rhog.nxl; % Get number of columns in T1rho lateral grid
%
xmin_t2s = min(xql_t2s); % Find minimum X coordinate for T2S lateral grid
xmax_t2s = max(xql_t2s); % Find maximum X coordinate for T2S lateral grid
nc_t2s = t2sg.nxl; % Get number of columns in T2S lateral grid
%
ymin_ffe = min(yql_ffe); % Find minimum Y coordinate for T1FFE lateral grid
ymax_ffe = max(yql_ffe); % Find maximum Y coordinate for T1FFE lateral grid
nr_ffe = ffeg.nyl; % Get number of rows in T1FFE lateral grid
%
ymin_rho = min(yql_rho); % Find minimum Y coordinate for T1rho lateral grid
ymax_rho = max(yql_rho); % Find maximum Y coordinate for T1rho lateral grid
nr_rho = rhog.nyl; % Get number of rows in T1rho lateral grid
%
ymin_t2s = min(yql_t2s); % Find minimum Y coordinate for T2S lateral grid
ymax_t2s = max(yql_t2s); % Find maximum Y coordinate for T2S lateral grid
nr_t2s = t2sg.nyl; % Get number of rows in T2S lateral grid
%%

%Get Combined Grid for Both Data Sets

xmin=[xmin_ffe; xmin_rho; xmin_t2s]; % Collect minimum X coordinates from all scans
xmin=min(xmin); % Find overall minimum X coordinate
%
xmax = [xmax_ffe; xmax_rho; xmax_t2s]; % Collect maximum X coordinates from all scans
xmax=max(xmax); % Find overall maximum X coordinate
%
ymin = [ymin_ffe; ymin_rho; ymin_t2s]; % Collect minimum Y coordinates from all scans
ymin = min(ymin); % Find overall minimum Y coordinate
%
ymax = [ymax_ffe; ymax_rho; ymax_t2s]; % Collect maximum Y coordinates from all scans
ymax = max(ymax); % Find overall maximum Y coordinate
%
[xgl,ygl] = meshgrid(xmin:xmax,ymin:ymax); % Create combined lateral grid using meshgrid
[nlr,nlc] = size(xgl); % Get dimensions of combined lateral grid (rows, columns)

%%
%
% Get Indexes into Combined Grid
%
nl = nlr*nlc; % Calculate total number of points in combined lateral grid
idx = reshape(1:nl,nlr,nlc); % Create index matrix for combined lateral grid
%
offstcf = round(xmin_ffe-xmin+1); % Calculate column offset for T1FFE lateral grid
offstrf = round(ymin_ffe-ymin+1); % Calculate row offset for T1FFE lateral grid
idxfl = idx(offstrf:offstrf+nr_ffe-1,offstcf:offstcf+nc_ffe-1); % Get indices for T1FFE lateral data in combined grid
%
offstcr = round(xmin_rho-xmin+1); % Calculate column offset for T1rho lateral grid
offstrr = round(ymin_rho-ymin+1); % Calculate row offset for T1rho lateral grid
idxrl  = idx(offstrr:offstrr+nr_rho-1,offstcr:offstcr+nc_rho-1); % Get indices for T1rho lateral data in combined grid
%
offstct = round(xmin_t2s-xmin+1); % Calculate column offset for T2S lateral grid
offstrt = round(ymin_t2s-ymin+1); % Calculate row offset for T2S lateral grid
idxtl = idx(offstrt:offstrt+nr_t2s-1,offstct:offstct+nc_t2s-1); % Get indices for T2S lateral data in combined grid

%%
%
% Get Coordinates and Ranges for Medial Compartment
%
xqm_ffe = ffeg.xqm; % Extract X coordinates for T1FFE medial grid
yqm_ffe = ffeg.yqm; % Extract Y coordinates for T1FFE medial grid
%
xqm_rho = rhog.xqm; % Extract X coordinates for T1rho medial grid
yqm_rho = rhog.yqm; % Extract Y coordinates for T1rho medial grid
%
xqm_t2s = t2sg.xqm; % Extract X coordinates for T2S medial grid
yqm_t2s = t2sg.yqm; % Extract Y coordinates for T2S medial grid
%
xmin_ffe = min(xqm_ffe); % Find minimum X coordinate for T1FFE medial grid
xmax_ffe = max(xqm_ffe); % Find maximum X coordinate for T1FFE medial grid
nc_ffe = ffeg.nxm; % Get number of columns in T1FFE medial grid
%
xmin_rho = min(xqm_rho); % Find minimum X coordinate for T1rho medial grid
xmax_rho = max(xqm_rho); % Find maximum X coordinate for T1rho medial grid
nc_rho = rhog.nxm; % Get number of columns in T1rho medial grid
%
xmin_t2s = min(xqm_t2s); % Find minimum X coordinate for T2S medial grid
xmax_t2s = max(xqm_t2s); % Find maximum X coordinate for T2S medial grid
nc_t2s = t2sg.nxm; % Get number of columns in T2S medial grid
%
ymin_ffe = min(yqm_ffe); % Find minimum Y coordinate for T1FFE medial grid
ymax_ffe = max(yqm_ffe); % Find maximum Y coordinate for T1FFE medial grid
nr_ffe = ffeg.nym; % Get number of rows in T1FFE medial grid
%
ymin_rho = min(yqm_rho); % Find minimum Y coordinate for T1rho medial grid
ymax_rho = max(yqm_rho); % Find maximum Y coordinate for T1rho medial grid
nr_rho = rhog.nym; % Get number of rows in T1rho medial grid
%
ymin_t2s = min(yqm_t2s); % Find minimum Y coordinate for T2S medial grid
ymax_t2s = max(yqm_t2s); % Find maximum Y coordinate for T2S medial grid
nr_t2s = t2sg.nym; % Get number of rows in T2S medial grid

%%
%
% Get Combined Grid for Both Data Sets
%
xmin=[xmin_ffe; xmin_rho; xmin_t2s]; % Collect minimum X coordinates for medial grids
xmin=min(xmin); % Find overall minimum X coordinate
%
xmax = [xmax_ffe; xmax_rho; xmax_t2s]; % Collect maximum X coordinates for medial grids
xmax=max(xmax); % Find overall maximum X coordinate
%
ymin = [ymin_ffe; ymin_rho; ymin_t2s]; % Collect minimum Y coordinates for medial grids
ymin = min(ymin); % Find overall minimum Y coordinate
%
ymax = [ymax_ffe; ymax_rho; ymax_t2s]; % Collect maximum Y coordinates for medial grids
ymax = max(ymax); % Find overall maximum Y coordinate
%
[xgm,ygm] = meshgrid(xmin:xmax,ymin:ymax); % Create combined medial grid using meshgrid
[nmr,nmc] = size(xgm); % Get dimensions of combined medial grid (rows, columns)

%%
%
% Get Indexes into Combined Grid
%
nm = nmr*nmc; % Calculate total number of points in combined medial grid
idx = reshape(1:nm,nmr,nmc); % Create index matrix for combined medial grid
%
offstcf = round(xmin_ffe-xmin+1); % Calculate column offset for T1FFE medial grid
offstrf = round(ymin_ffe-ymin+1); % Calculate row offset for T1FFE medial grid
idxfm = idx(offstrf:offstrf+nr_ffe-1,offstcf:offstcf+nc_ffe-1); % Get indices for T1FFE medial data in combined grid
%
offstcr = round(xmin_rho-xmin+1); % Calculate column offset for T1rho medial grid
offstrr = round(ymin_rho-ymin+1); % Calculate row offset for T1rho medial grid
idxrm = idx(offstrr:offstrr+nr_rho-1,offstcr:offstcr+nc_rho-1); % Get indices for T1rho medial data in combined grid
%
offstct = round(xmin_t2s-xmin+1); % Calculate column offset for T2S medial grid
offstrt = round(ymin_t2s-ymin+1); % Calculate row offset for T2S medial grid
idxtm = idx(offstrt:offstrt+nr_t2s-1,offstct:offstct+nc_t2s-1); % Get indices for T2S medial data in combined grid

%%
%
% Read Cartilage Thicknesses
%
cthkld_rf = zeros(nlr,nlc,ns); % Initialize array for T1rho-T1FFE lateral thickness differences
cthkld_tf = zeros(nlr,nlc,ns); % Initialize array for T2S-T1FFE lateral thickness differences
cthkmd_rf = zeros(nmr,nmc,ns); % Initialize array for T1rho-T1FFE medial thickness differences
cthkmd_tf = zeros(nmr,nmc,ns); % Initialize array for T2S-T1FFE medial thickness differences
%
bonemaxsl=zeros(ns,3,3); % Initialize array for maximum lateral bone coordinates (subjects, coordinates, scan types)
bonemaxsm=zeros(ns,3,3); % Initialize array for maximum medial bone coordinates (subjects, coordinates, scan types)
boneminsl=zeros(ns,3,3); % Initialize array for minimum lateral bone coordinates (subjects, coordinates, scan types)
boneminsm=zeros(ns,3,3); % Initialize array for minimum medial bone coordinates (subjects, coordinates, scan types)

% j == 1 FFE, j == 2 RHO, j == 3 T2S
%%
for i=1:ns % Loop through each subject
    bonemaxsl(i,:,1) = max(sd(i).FFE.tibia.bone.lateral.points); % Get maximum T1FFE lateral bone coordinates
    bonemaxsm(i,:,1) = max(sd(i).FFE.tibia.bone.medial.points); % Get maximum T1FFE medial bone coordinates
    boneminsl(i,:,1) = min(sd(i).FFE.tibia.bone.lateral.points); % Get minimum T1FFE lateral bone coordinates
    boneminsm(i,:,1) = min(sd(i).FFE.tibia.bone.medial.points); % Get minimum T1FFE medial bone coordinates
    %
    bonemaxsl(i,:,2) = max(sd(i).RHO.tibia.bone.lateral.points); % Get maximum T1rho lateral bone coordinates
    bonemaxsm(i,:,2) = max(sd(i).RHO.tibia.bone.medial.points); % Get maximum T1rho medial bone coordinates
    boneminsl(i,:,2) = min(sd(i).RHO.tibia.bone.lateral.points); % Get minimum T1rho lateral bone coordinates
    boneminsm(i,:,2) = min(sd(i).RHO.tibia.bone.medial.points); % Get minimum T1rho medial bone coordinates
    %
    bonemaxsl(i,:,3) = max(sd(i).T2S.tibia.bone.lateral.points); % Get maximum T2S lateral bone coordinates
    bonemaxsm(i,:,3) = max(sd(i).T2S.tibia.bone.medial.points); % Get maximum T2S medial bone coordinates
    boneminsl(i,:,3) = min(sd(i).T2S.tibia.bone.lateral.points); % Get minimum T2S lateral bone coordinates
    boneminsm(i,:,3) = min(sd(i).T2S.tibia.bone.medial.points); % Get minimum T2S medial bone coordinates
end
bonerangel = bonemaxsl - boneminsl; % Calculate range of lateral bone coordinates
bonerangem = bonemaxsm - boneminsm; % Calculate range of medial bone coordinates
%
thirdsl=bonerangel/3; % Divide lateral ranges into thirds for regional divisions
thirdsm=bonerangem/3; % Divide medial ranges into thirds for regional divisions
%
reg_lines1l = boneminsl + thirdsl; % Calculate first regional division lines for lateral compartment
reg_lines1m = boneminsm + thirdsm; % Calculate first regional division lines for medial compartment
reg_lines2l = reg_lines1l + thirdsl; % Calculate second regional division lines for lateral compartment
reg_lines2m = reg_lines1m + thirdsm; % Calculate second regional division lines for medial compartment
%
reg_lat1 = squeeze(mean(reg_lines1l(:,1,:))); % Average first lateral division X-coordinate over subjects
reg_lat1_all=mean(reg_lat1); % Average first lateral division X-coordinate over all scans
%
reg_lat2 = squeeze(mean(reg_lines2l(:,1,:))); % Average second lateral division X-coordinate over subjects
reg_lat2_all=mean(reg_lat2); % Average second lateral division X-coordinate over all scans
%
reg_med1 = squeeze(mean(reg_lines1m(:,1,:))); % Average first medial division X-coordinate over subjects
reg_med1_all = mean(reg_med1); % Average first medial division X-coordinate over all scans
%
reg_med2 = squeeze(mean(reg_lines2m(:,1,:))); % Average second medial division X-coordinate over subjects
reg_med2_all = mean(reg_med2); % Average second medial division X-coordinate over all scans
%
avg_lats = zeros(3,3,ns); % Initialize array for lateral average thicknesses (scan types, regions, subjects)
avg_meds = zeros(3,3,ns); % Initialize array for medial average thicknesses (scan types, regions, subjects)
%%
cthkmf2 = []; % Initialize empty array for T1FFE medial thicknesses
cthkmr2 = []; % Initialize empty array for T1rho medial thicknesses
cthkmt2 = []; % Initialize empty array for T2S medial thicknesses
cthklf2 = []; % Initialize empty array for T1FFE lateral thicknesses
cthklr2 = []; % Initialize empty array for T1rho lateral thicknesses
cthklt2 = []; % Initialize empty array for T2S lateral thicknesses
for i=1:ns % Loop through each subject
    fstr=sd(i).FFE.tibia.bfnam; % Get T1FFE bone file name
    fstr=[fstr(1:6) fstr(15:17) '_tcart08_thk.mat']; % Construct T1FFE thickness file name
    ffe = load(fullfile(tdir,fstr)); % Load T1FFE thickness data from MAT file
    %
    fstr=sd(i).RHO.tibia.bfnam; % Get T1rho bone file name
    fstr=[fstr(1:6) fstr(15:17) '_tcart08_thk.mat']; % Construct T1rho thickness file name
    rho = load(fullfile(tdir,fstr)); % Load T1rho thickness data from MAT file
    %
    fstr=sd(i).T2S.tibia.bfnam; % Get T2S bone file name
    fstr=[fstr(1:6) fstr(15:17) '_tcart08_thk.mat']; % Construct T2S thickness file name
    t2s = load(fullfile(tdir,fstr)); % Load T2S thickness data from MAT file
    %
    cthkfl = ffe.cthkl; % Extract T1FFE lateral thicknesses
    cthkrl = rho.cthkl; % Extract T1rho lateral thicknesses
    cthktl= t2s.cthkl; % Extract T2S lateral thicknesses
    %%
    %
    % Get Cartilage Thicknesses at Similar Coordinates
    %
    cthklf = NaN(nlr,nlc); % Initialize NaN array for T1FFE lateral thicknesses
    cthklr = NaN(nlr,nlc); % Initialize NaN array for T1rho lateral thicknesses
    cthklt = NaN(nlr,nlc); % Initialize NaN array for T2S lateral thicknesses
    %
    cthklf(idxfl) = cthkfl; % Map T1FFE lateral thicknesses to combined grid
    cthklr(idxrl) = cthkrl; % Map T1rho lateral thicknesses to combined grid
    cthklt(idxtl) = cthktl; % Map T2S lateral thicknesses to combined grid
    %
    cthklf2 = cat(3,cthklf2,cthklf); % Append T1FFE lateral thicknesses to 3D array
    cthklr2 = cat(3,cthklr2,cthklr); % Append T1rho lateral thicknesses to 3D array
    cthklt2 = cat(3,cthklt2,cthklt); % Append T2S lateral thicknesses to 3D array
    %
    % Read Cartilage Thicknesses
    %
    cthkfm = ffe.cthkm; % Extract T1FFE medial thicknesses
    cthkrm = rho.cthkm; % Extract T1rho medial thicknesses
    cthktm = t2s.cthkm; % Extract T2S medial thicknesses
    %%
    %
    % Get Cartilage Thicknesses at Similar Coordinates
    %
    cthkmf = NaN(nmr,nmc); % Initialize NaN array for T1FFE medial thicknesses
    cthkmr = NaN(nmr,nmc); % Initialize NaN array for T1rho medial thicknesses
    cthkmt = NaN(nmr,nmc); % Initialize NaN array for T2S medial thicknesses
    %
    cthkmf(idxfm) = cthkfm; % Map T1FFE medial thicknesses to combined grid
    cthkmr(idxrm) = cthkrm; % Map T1rho medial thicknesses to combined grid
    cthkmt(idxtm) = cthktm; % Map T2S medial thicknesses to combined grid
    %
    cthkmf2 = cat(3,cthkmf2,cthkmf); % Append T1FFE medial thicknesses to 3D array
    cthkmr2 = cat(3,cthkmr2,cthkmr); % Append T1rho medial thicknesses to 3D array
    cthkmt2 = cat(3,cthkmt2,cthkmt); % Append T2S medial thicknesses to 3D array
    %
    % Calculate Differences
    %
    cthkld_rf(:,:,i) = cthklr-cthklf; % Calculate T1rho-T1FFE lateral thickness differences
    cthkld_tf(:,:,i) = cthklt-cthklf; % Calculate T2S-T1FFE lateral thickness differences
    cthkmd_rf(:,:,i) = cthkmr-cthkmf; % Calculate T1rho-T1FFE medial thickness differences
    cthkmd_tf(:,:,i) = cthkmt-cthkmf; % Calculate T2S-T1FFE medial thickness differences
end
%%
%
idx_cthklf = ~isnan(cthklf2); % Identify non-NaN T1FFE lateral thicknesses
idx_cthklr = ~isnan(cthklr2); % Identify non-NaN T1rho lateral thicknesses
idx_cthklt = ~isnan(cthklt2); % Identify non-NaN T2S lateral thicknesses
idx_cthkmf = ~isnan(cthkmf2); % Identify non-NaN T1FFE medial thicknesses
idx_cthkmr = ~isnan(cthkmr2); % Identify non-NaN T1rho medial thicknesses
idx_cthkmt = ~isnan(cthkmt2); % Identify non-NaN T2S medial thicknesses
%
lat_cols = sum(max(idx_cthklf),3) + sum(max(idx_cthklr),3) + sum(max(idx_cthklt),3); % Sum maximum lateral indices across scans
lat_rows = sum(max(idx_cthklf,[],2),3) + sum(max(idx_cthklr,[],2),3) + sum(max(idx_cthklt,[],2),3); % Sum maximum lateral row indices
lat_cols = logical(lat_cols); % Convert lateral columns to logical array
lat_rows = logical(lat_rows); % Convert lateral rows to logical array
%
med_cols = sum(max(idx_cthkmf),3) + sum(max(idx_cthkmr),3) + sum(max(idx_cthkmt),3); % Sum maximum medial indices across scans
med_rows = sum(max(idx_cthkmf,[],2),3) + sum(max(idx_cthkmr,[],2),3) + sum(max(idx_cthkmt,[],2),3); % Sum maximum medial row indices
med_cols = logical(med_cols); % Convert medial columns to logical array
med_rows = logical(med_rows); % Convert medial rows to logical array
%
lat_col1 = find(lat_cols,1,'first'); % Find first lateral column with valid data
lat_col2 = find(lat_cols,1,'last'); % Find last lateral column with valid data
med_col1 = find(med_cols,1,'first'); % Find first medial column with valid data
med_col2 = find(med_cols,1,'last'); % Find last medial column with valid data
%
lat_row1 = find(lat_rows,1,'first'); % Find first lateral row with valid data
lat_row2 = find(lat_rows,1,'last'); % Find last lateral row with valid data
med_row1 = find(med_rows,1,'first'); % Find first medial row with valid data
med_row2 = find(med_rows,1,'last'); % Find last medial row with valid data
%
cthklf2 = cthklf2(lat_row1:lat_row2,lat_col1:lat_col2,:); % Trim T1FFE lateral thickness array
cthklr2 = cthklr2(lat_row1:lat_row2,lat_col1:lat_col2,:); % Trim T1rho lateral thickness array
cthklt2 = cthklt2(lat_row1:lat_row2,lat_col1:lat_col2,:); % Trim T2S lateral thickness array
cthkmf2 = cthkmf2(med_row1:med_row2,med_col1:med_col2,:); % Trim T1FFE medial thickness array
cthkmr2 = cthkmr2(med_row1:med_row2,med_col1:med_col2,:); % Trim T1rho medial thickness array
cthkmt2 = cthkmt2(med_row1:med_row2,med_col1:med_col2,:); % Trim T2S medial thickness array
%
cthkld_rf = cthkld_rf(lat_row1:lat_row2,lat_col1:lat_col2,:); % Trim T1rho-T1FFE lateral difference array
cthkld_tf = cthkld_tf(lat_row1:lat_row2,lat_col1:lat_col2,:); % Trim T2S-T1FFE lateral difference array
cthkmd_rf = cthkmd_rf(med_row1:med_row2,med_col1:med_col2,:); % Trim T1rho-T1FFE medial difference array
cthkmd_tf = cthkmd_tf(med_row1:med_row2,med_col1:med_col2,:); % Trim T2S-T1FFE medial difference array
%
xgl = xgl(lat_row1:lat_row2,lat_col1:lat_col2); % Trim lateral X grid to valid region
ygl = ygl(lat_row1:lat_row2,lat_col1:lat_col2); % Trim lateral Y grid to valid region
xgm = xgm(med_row1:med_row2,med_col1:med_col2); % Trim medial X grid to valid region
ygm = ygm(med_row1:med_row2,med_col1:med_col2); % Trim medial Y grid to valid region
%
[nlr,nlc] = size(xgl); % Update lateral grid dimensions (rows, columns)
xgl = xgl(:); % Flatten lateral X grid to vector
ygl = ygl(:); % Flatten lateral Y grid to vector
quadl = quadconn(nlr,nlc); % Generate quadrilateral connectivity for lateral grid
%
[nmr,nmc] = size(xgm); % Update medial grid dimensions (rows, columns)
xgm = xgm(:); % Flatten medial X grid to vector
ygm = ygm(:); % Flatten medial Y grid to vector
quadm = quadconn(nmr,nmc); % Generate quadrilateral connectivity for medial grid
%
% Lateral Compartment
%
ilat(:,3) = xgl>reg_lat2_all; % Define anterior region for lateral compartment
ilat(:,2) = xgl<reg_lat2_all&xgl>reg_lat1_all; % Define central region for lateral compartment
ilat(:,1) = xgl<reg_lat1_all; % Define posterior region for lateral compartment
%
% Medial Compartment
%
imed(:,3) = xgm>reg_med2_all; % Define anterior region for medial compartment
imed(:,2) = xgm<reg_med2_all&xgm>reg_med1_all; % Define central region for medial compartment
imed(:,1) = xgm<reg_med1_all; % Define posterior region for medial compartment
%
roi(1) = "tib_lat_pos.xlsx"; % Define output file for lateral posterior region
roi(2) = "tib_med_pos.xlsx"; % Define output file for medial posterior region
roi(3) = "tib_lat_ctr.xlsx"; % Define output file for lateral central region
roi(4) = "tib_med_ctr.xlsx"; % Define output file for medial central region
roi(5) = "tib_lat_ant.xlsx"; % Define output file for lateral anterior region
roi(6) = "tib_med_ant.xlsx"; % Define output file for medial anterior region
%
coordl = 1:size(xgl); % Create coordinate indices for lateral grid
coordl = coordl(:); % Flatten lateral coordinate indices to vector
coordm = 1:size(xgm); % Create coordinate indices for medial grid
coordm = coordm(:); % Flatten medial coordinate indices to vector
%%
ii=0; % Initialize row offset for Excel output
for i=1:ns % Loop through each subject
    % Turning the thicknesses into vectors
    cthklf_v = cthklf2(:,:,i); % Extract T1FFE lateral thicknesses for current subject
    cthklr_v = cthklr2(:,:,i); % Extract T1rho lateral thicknesses for current subject
    cthklt_v = cthklt2(:,:,i); % Extract T2S lateral thicknesses for current subject
    cthkmf_v = cthkmf2(:,:,i); % Extract T1FFE medial thicknesses for current subject
    cthkmr_v = cthkmr2(:,:,i); % Extract T1rho medial thicknesses for current subject
    cthkmt_v = cthkmt2(:,:,i); % Extract T2S medial thicknesses for current subject
    cthklf_v = cthklf_v(:); % Flatten T1FFE lateral thicknesses to vector
    cthklr_v = cthklr_v(:); % Flatten T1rho lateral thicknesses to vector
    cthklt_v = cthklt_v(:); % Flatten T2S lateral thicknesses to vector
    cthkmf_v = cthkmf_v(:); % Flatten T1FFE medial thicknesses to vector
    cthkmr_v = cthkmr_v(:); % Flatten T1rho medial thicknesses to vector
    cthkmt_v = cthkmt_v(:); % Flatten T2S medial thicknesses to vector
    %
    avg_lats(1,1) = mean(cthklf_v(ilat(:,1)),"omitnan"); % Calculate mean T1FFE lateral posterior thickness
    avg_lats(2,1) = mean(cthklr_v(ilat(:,1)),"omitnan"); % Calculate mean T1rho lateral posterior thickness
    avg_lats(3,1) = mean(cthklt_v(ilat(:,1)),"omitnan"); % Calculate mean T2S lateral posterior thickness
    %
    avg_lats(1,2) = mean(cthklf_v(ilat(:,2)),"omitnan"); % Calculate mean T1FFE lateral central thickness
    avg_lats(2,2) = mean(cthklr_v(ilat(:,2)),"omitnan"); % Calculate mean T1rho lateral central thickness
    avg_lats(3,2) = mean(cthklt_v(ilat(:,2)),"omitnan"); % Calculate mean T2S lateral central thickness
    %
    avg_lats(1,3) = mean(cthklf_v(ilat(:,3)),"omitnan"); % Calculate mean T1FFE lateral anterior thickness
    avg_lats(2,3) = mean(cthklr_v(ilat(:,3)),"omitnan"); % Calculate mean T1rho lateral anterior thickness
    avg_lats(3,3) = mean(cthklt_v(ilat(:,3)),"omitnan"); % Calculate mean T2S lateral anterior thickness
    %
    avg_meds(1,1) = mean(cthkmf_v(imed(:,1)),"omitnan"); % Calculate mean T1FFE medial posterior thickness
    avg_meds(2,1) = mean(cthkmr_v(imed(:,1)),"omitnan"); % Calculate mean T1rho medial posterior thickness
    avg_meds(3,1) = mean(cthkmt_v(imed(:,1)),"omitnan"); % Calculate mean T2S medial posterior thickness
    %
    avg_meds(1,2) = mean(cthkmf_v(imed(:,2)),"omitnan"); % Calculate mean T1FFE medial central thickness
    avg_meds(2,2) = mean(cthkmr_v(imed(:,2)),"omitnan"); % Calculate mean T1rho medial central thickness
    avg_meds(3,2) = mean(cthkmt_v(imed(:,2)),"omitnan"); % Calculate mean T2S medial central thickness
    %
    avg_meds(1,3) = mean(cthkmf_v(imed(:,3)),"omitnan"); % Calculate mean T1FFE medial anterior thickness
    avg_meds(2,3) = mean(cthkmr_v(imed(:,3)),"omitnan"); % Calculate mean T1rho medial anterior thickness
    avg_meds(3,3) = mean(cthkmt_v(imed(:,3)),"omitnan"); % Calculate mean T2S medial anterior thickness
    %
    fstr=sd(i).FFE.tibia.bfnam; % Get T1FFE bone file name for current subject
    %
    % Plots of Cartilage Thicknesses and Thickness Differences
    %
    f = figure; % Create new figure for plotting
    t = tiledlayout(2,6); % Create 2x6 tiled layout for subplots
    sgtitle({[fstr(1:5) ' - Tibia'];}, ...
        'FontSize',16,'FontWeight','bold','Interpreter','none'); % Add suptitle with subject ID (first 5 characters)
    orient landscape; % Set figure orientation to landscape
    %
    hf1=nexttile(1,[1 2]); % Create subplot spanning 1 row, 2 columns for T1rho thicknesses
    cthk = cthklr_v; % Get T1rho lateral thicknesses
    %
    patch(xgl(quadl'),ygl(quadl'),cthk(quadl'),'FaceColor','interp', ...
        'EdgeColor','interp'); % Plot T1rho lateral thickness surface
    %
    hold on; % Keep current plot active
    cthk = cthkmr_v; % Get T1rho medial thicknesses
    %
    patch(xgm(quadm'),ygm(quadm'),cthk(quadm'),'FaceColor','interp', ...
        'EdgeColor','interp'); % Plot T1rho medial thickness surface
    %
    axis equal; % Set equal scaling for axes
    view(-90,90); % Set view to top-down (XY plane)
    title('T1\rho Cartilage Thicknesses','FontSize',16,'FontWeight','bold'); % Add subplot title
    colorbar(hf1, 'Ticks',0:6); % Add colorbar with ticks from 0 to 6
    clim([0 6]); % Set color limits for thickness (0 to 6 mm)
    xlim([-30 30]); % Set X-axis limits
    ylim([-40 40]); % Set Y-axis limits
    %
    axlim=axis; % Get current axis limits
    plot([reg_lat1_all reg_lat1_all],[axlim(4) 0],"k",'LineWidth',1.5); % Plot first lateral division line
    plot([reg_lat2_all reg_lat2_all],[axlim(4) 0],"k",'LineWidth',1.5); % Plot second lateral division line
    plot([reg_med1_all reg_med1_all],[0 axlim(3)],"k",'LineWidth',1.5); % Plot first medial division line
    plot([reg_med2_all reg_med2_all],[0 axlim(3)],"k",'LineWidth',1.5); % Plot second medial division line
    %
    hf2=nexttile(3,[1 2]); % Create subplot spanning 1 row, 2 columns for T1FFE thicknesses
    cthk = cthklf_v; % Get T1FFE lateral thicknesses
    %
    patch(xgl(quadl'),ygl(quadl'),cthk(quadl'),'FaceColor','interp', ...
        'EdgeColor','interp'); % Plot T1FFE lateral thickness surface
    %
    hold on; % Keep current plot active
    cthk = cthkmf_v; % Get T1FFE medial thicknesses
    %
    patch(xgm(quadm'),ygm(quadm'),cthk(quadm'),'FaceColor','interp', ...
        'EdgeColor','interp'); % Plot T1FFE medial thickness surface
    %
    axis equal; % Set equal scaling for axes
    view(-90,90); % Set view to top-down (XY plane)
    title('T1FFE Cartilage Thicknesses','FontSize',16,'FontWeight','bold'); % Add subplot title
    colorbar(hf2, 'Ticks',0:6); % Add colorbar with ticks from 0 to 6
    clim([0 6]); % Set color limits for thickness (0 to 6 mm)
    xlim([-30 30]); % Set X-axis limits
    ylim([-40 40]); % Set Y-axis limits
    %
    axlim=axis; % Get current axis limits
    plot([reg_lat1_all reg_lat1_all],[axlim(4) 0],"k",'LineWidth',1.5); % Plot first lateral division line
    plot([reg_lat2_all reg_lat2_all],[axlim(4) 0],"k",'LineWidth',1.5); % Plot second lateral division line
    plot([reg_med1_all reg_med1_all],[0 axlim(3)],"k",'LineWidth',1.5); % Plot first medial division line
    plot([reg_med2_all reg_med2_all],[0 axlim(3)],"k",'LineWidth',1.5); % Plot second medial division line
    %
    hf3=nexttile(5,[1 2]); % Create subplot spanning 1 row, 2 columns for T2S thicknesses
    cthk = cthklt_v; % Get T2S lateral thicknesses
    %
    patch(xgl(quadl'),ygl(quadl'),cthk(quadl'),'FaceColor','interp', ...
        'EdgeColor','interp'); % Plot T2S lateral thickness surface
    %
    hold on; % Keep current plot active
    cthk = cthkmt_v; % Get T2S medial thicknesses
    %
    patch(xgm(quadm'),ygm(quadm'),cthk(quadm'),'FaceColor','interp', ...
        'EdgeColor','interp'); % Plot T2S medial thickness surface
    %
    axis equal; % Set equal scaling for axes
    view(-90,90); % Set view to top-down (XY plane)
    title('T2S Cartilage Thicknesses','FontSize',16,'FontWeight','bold'); % Add subplot title
    colorbar(hf3, 'Ticks',0:6); % Add colorbar with ticks from 0 to 6
    clim([0 6]); % Set color limits for thickness (0 to 6 mm)
    xlim([-30 30]); % Set X-axis limits
    ylim([-40 40]); % Set Y-axis limits
   
    axlim=axis; % Get current axis limits
    plot([reg_lat1_all reg_lat1_all],[axlim(4) 0],"k",'LineWidth',1.5); % Plot first lateral division line
    plot([reg_lat2_all reg_lat2_all],[axlim(4) 0],"k",'LineWidth',1.5); % Plot second lateral division line
    plot([reg_med1_all reg_med1_all],[0 axlim(3)],"k",'LineWidth',1.5); % Plot first medial division line
    plot([reg_med2_all reg_med2_all],[0 axlim(3)],"k",'LineWidth',1.5); % Plot second medial division line
    %
    colormap(hf1, 'jet'); % Set jet colormap for T1rho thickness plot
    colormap(hf2, 'jet'); % Set jet colormap for T1FFE thickness plot
    colormap(hf3, 'jet'); % Set jet colormap for T2S thickness plot
    %
    hf4=nexttile(7,[1 3]); % Create subplot spanning 1 row, 3 columns for T1rho-T1FFE differences
    dthklrf = cthkld_rf(:,:,i); % Get T1rho-T1FFE lateral thickness differences for current subject
    %
    patch(xgl(quadl'),ygl(quadl'),dthklrf(quadl'),'FaceColor','interp', ...
        'EdgeColor','interp'); % Plot T1rho-T1FFE lateral difference surface
    hold on; % Keep current plot active
    dthkmrf = cthkmd_rf(:,:,i); % Get T1rho-T1FFE medial thickness differences for current subject
    %
    patch(xgm(quadm'),ygm(quadm'),dthkmrf(quadm'),'FaceColor','interp', ...
        'EdgeColor','interp'); % Plot T1rho-T1FFE medial difference surface
    axis equal; % Set equal scaling for axes
    view(-90,90); % Set view to top-down (XY plane)
    title('T1\rho - T1FFE Cartilage Thickness Differences', ...
        'FontSize',16,'FontWeight','bold'); % Add subplot title
    %
    colorbar; % Add colorbar for T1rho-T1FFE differences
    clim([-1.5 1.5]); % Set color limits for differences (-1.5 to 1.5 mm)
    xlim([-30 30]); % Set X-axis limits
    ylim([-40 40]); % Set Y-axis limits
    %
    axlim=axis; % Get current axis limits
    plot([reg_lat1_all reg_lat1_all],[axlim(4) 0],"k",'LineWidth',1.5); % Plot first lateral division line
    plot([reg_lat2_all reg_lat2_all],[axlim(4) 0],"k",'LineWidth',1.5); % Plot second lateral division line
    plot([reg_med1_all reg_med1_all],[0 axlim(3)],"k",'LineWidth',1.5); % Plot first medial division line
    plot([reg_med2_all reg_med2_all],[0 axlim(3)],"k",'LineWidth',1.5); % Plot second medial division line

    %
    hf5=nexttile(10,[1 3]); % Create subplot spanning 1 row, 3 columns for T2S-T1FFE differences
    dthkltf = cthkld_tf(:,:,i); % Get T2S-T1FFE lateral thickness differences for current subject
    %
    patch(xgl(quadl'),ygl(quadl'),dthkltf(quadl'),'FaceColor','interp', ...
        'EdgeColor','interp'); % Plot T2S-T1FFE lateral difference surface
    hold on; % Keep current plot active
    dthkmtf = cthkmd_tf(:,:,i); % Get T2S-T1FFE medial thickness differences for current subject
    %
    patch(xgm(quadm'),ygm(quadm'),dthkmtf(quadm'),'FaceColor','interp', ...
        'EdgeColor','interp'); % Plot T2S-T1FFE medial difference surface
    axis equal; % Set equal scaling for axes
    view(-90,90); % Set view to top-down (XY plane)
    title('T2S - T1FFE Cartilage Thickness Differences', ...
        'FontSize',16,'FontWeight','bold'); % Add subplot title
    %
    colorbar; % Add colorbar for T2s-T1FFE differences
    clim([-1.5 1.5]); % Set color limits for differences (-1.5 to 1.5 mm)
    xlim([-30 30]); % Set X-axis limits
    ylim([-40 40]); % Set Y-axis limits
    %
    colormap(hf4, 'parula'); % Set parula colormap for T1rho-T1FFE difference plot
    colormap(hf5, 'parula'); % Set parula colormap for T2S-T1FFE difference plot
    %
    axlim=axis; % Get current axis limits
    plot([reg_lat1_all reg_lat1_all],[axlim(4) 0],"k",'LineWidth',1.5); % Plot first lateral division line
    plot([reg_lat2_all reg_lat2_all],[axlim(4) 0],"k",'LineWidth',1.5); % Plot second lateral division line
    plot([reg_med1_all reg_med1_all],[0 axlim(3)],"k",'LineWidth',1.5); % Plot first medial division line
    plot([reg_med2_all reg_med2_all],[0 axlim(3)],"k",'LineWidth',1.5); % Plot second medial division line
    tflat1 = mean(dthkltf(ilat(:,1)),"omitnan"); % Calculate mean T2S-T1FFE lateral posterior difference
    tflat2 = mean(dthkltf(ilat(:,2)),"omitnan"); % Calculate mean T2S-T1FFE lateral central difference
    tflat3 = mean(dthkltf(ilat(:,3)),"omitnan"); % Calculate mean T2S-T1FFE lateral anterior difference
    tfmed1 = mean(dthkmtf(imed(:,1)),"omitnan"); % Calculate mean T2S-T1FFE medial posterior difference
    tfmed2 = mean(dthkmtf(imed(:,2)),"omitnan"); % Calculate mean T2S-T1FFE medial central difference
    tfmed3 = mean(dthkmtf(imed(:,3)),"omitnan"); % Calculate mean T2S-T1FFE medial anterior difference
    %
    pic_nam=fullfile(rdir, 'Tibial Thickness Differences.pdf'); % Define output PDF file path for thickness differences

    if i==1 && exist(pic_nam,'file')==2 % Check if first subject and PDF file exists
        delete(pic_nam); % Delete existing PDF file
    end
    set(f, 'units','normalized','outerposition',[0 0 1 1]); % Maximize figure window to full screen
    exportgraphics(f, pic_nam, "Resolution", 300, 'Append', true); % Append figure to PDF with 300 DPI resolution
    close(f); % Close current figure

    %%
    %
    % Statistics and Plot of Differences
    %
    dthklrf = dthklrf(:); % Flatten T1rho-T1FFE lateral thickness differences to vector
    dthkmrf = dthkmrf(:); % Flatten T1rho-T1FFE medial thickness differences to vector
    dthkltf = dthkltf(:); % Flatten T2S-T1FFE lateral thickness differences to vector
    dthkmtf = dthkmtf(:); % Flatten T2S-T1FFE medial thickness differences to vector
    %
    dmeanlrf = mean(dthklrf,"omitnan"); % Calculate mean T1rho-T1FFE lateral thickness difference
    dmeanmrf = mean(dthkmrf,"omitnan"); % Calculate mean T1rho-T1FFE medial thickness difference
    dmeanltf = mean(dthkltf,"omitnan"); % Calculate mean T2S-T1FFE lateral thickness difference
    dmeanmtf = mean(dthkmtf,"omitnan"); % Calculate mean T2S-T1FFE medial thickness difference
    dstdlrf = std(dthklrf,"omitnan"); % Calculate standard deviation of T1rho-T1FFE lateral thickness difference
    dstdmrf = std(dthkmrf,"omitnan"); % Calculate standard deviation of T1rho-T1FFE medial thickness difference
    dstdltf = std(dthkltf,"omitnan"); % Calculate standard deviation of T2S-T1FFE lateral thickness difference
    dstdmtf = std(dthkmtf,"omitnan"); % Calculate standard deviation of T2S-T1FFE medial thickness difference
    %
    dmaxlrf = max(dthklrf); % Calculate maximum T1rho-T1FFE lateral thickness difference
    dminlrf = min(dthklrf); % Calculate minimum T1rho-T1FFE lateral thickness difference
    dmaxmrf = max(dthkmrf); % Calculate maximum T1rho-T1FFE medial thickness difference
    dminmrf = min(dthkmrf); % Calculate minimum T1rho-T1FFE medial thickness difference
    dmaxltf = max(dthkltf); % Calculate maximum T2S-T1FFE lateral thickness difference
    dminltf = min(dthkltf); % Calculate minimum T2S-T1FFE lateral thickness difference
    dmaxmtf = max(dthkmtf); % Calculate maximum T2S-T1FFE medial thickness difference
    dminmtf = min(dthkmtf); % Calculate minimum T2S-T1FFE medial thickness difference
    %
    %
    f = figure; % Create new figure for plotting
    t = tiledlayout(2,2); % Create 2x2 tiled layout for subplots
    sgtitle({[fstr(1:5) ' - Tibia'];}, 'FontSize',16,'FontWeight','bold','Interpreter','none'); % Add suptitle with subject ID
    orient landscape; % Set figure orientation to landscape
    %
    nexttile; % Select first subplot
    %plot(dthklrf,'k.');
    hold on; % Keep current plot active
    %
    plot1 = plot(dthklrf(ilat(:,1)),'r.'); % Plot T1rho-T1FFE lateral posterior differences in red
    plot2 = plot(dthklrf(ilat(:,2)),'.','Color','#00c04b'); % Plot T1rho-T1FFE lateral central differences in green
    plot3 = plot(dthklrf(ilat(:,3)),'b.'); % Plot T1rho-T1FFE lateral anterior differences in blue
    ylim([-2 2]); % Set Y-axis limits
    axlim = axis; % Get current axis limits
    plot(axlim(1:2),[dmeanlrf dmeanlrf],'b','LineWidth',1); % Plot mean difference as blue line
    plot(axlim(1:2),[dmeanlrf+3*dstdlrf dmeanlrf+3*dstdlrf],'r--','LineWidth',1); % Plot upper 3 SD line in red
    plot(axlim(1:2),[dmeanlrf-3*dstdlrf dmeanlrf-3*dstdlrf],'r--','LineWidth',1); % Plot lower -3 SD line in red
    title(['Rho/FFE Lateral Differences', newline, 'Max: ', num2str(dmaxlrf), ' Min: ', num2str(dminlrf)], 'FontSize',16,'FontWeight','bold'); % Set subplot title with max/min
    legend([plot1, plot2, plot3], {'Posterior', 'Center', 'Anterior'}); % Add legend for regions
    %
    nexttile; % Select second subplot
    %plot(dthkltf,'k.');
    hold on; % Keep current plot active
    %plot(axlim(1:2),[0 0],'k-');
    plot1 = plot(dthkltf(ilat(:,1)),'r.'); % Plot T2S-T1FFE lateral posterior differences in red
    plot2 = plot(dthkltf(ilat(:,2)),'.','Color','#00c04b'); % Plot T2S-T1FFE lateral central differences in green
    plot3 = plot(dthkltf(ilat(:,3)),'b.'); % Plot T2S-T1FFE lateral anterior differences in blue
    ylim([-2 2]); % Set Y-axis limits
    axlim = axis; % Get current axis limits
    plot(axlim(1:2),[dmeanltf dmeanltf],'b','LineWidth',1); % Plot mean difference as blue line
    plot(axlim(1:2),[dmeanltf+3*dstdltf dmeanltf+3*dstdltf],'r--','LineWidth',1); % Plot upper 3 SD line in red
    plot(axlim(1:2),[dmeanltf-3*dstdltf dmeanltf-3*dstdltf],'r--','LineWidth',1); % Plot lower -3 SD line in red
    title(['T2S/FFE Lateral Differences', newline, 'Max: ', num2str(dmaxltf), ' Min: ', num2str(dminltf)], 'FontSize',16,'FontWeight','bold'); % Set subplot title with max/min
    legend([plot1, plot2, plot3], {'Posterior', 'Center', 'Anterior'}); % Add legend for regions
    %
    %
    nexttile; % Select third subplot
    %plot(dthkmrf,'k.');
    hold on; % Keep current plot active
    %plot(axlim(1:2),[0 0],'k-');
    plot1 = plot(dthkmrf(imed(:,1)),'r.'); % Plot T1rho-T1FFE medial posterior differences in red
    plot2 = plot(dthkmrf(imed(:,2)),'.','Color','#00c04b'); % Plot T1rho-T1FFE medial central differences in green
    plot3 = plot(dthkmrf(imed(:,3)),'b.'); % Plot T1rho-T1FFE medial anterior differences in blue
    ylim([-2 2]); % Set Y-axis limits
    axlim = axis; % Get current axis limits
    plot(axlim(1:2),[dmeanmrf dmeanmrf],'b','LineWidth',1); % Plot mean difference as blue line
    plot(axlim(1:2),[dmeanmrf+3*dstdmrf dmeanmrf+3*dstdmrf],'r--','LineWidth',1); % Plot upper 3 SD line in red
    plot(axlim(1:2),[dmeanmrf-3*dstdmrf dmeanmrf-3*dstdmrf],'r--','LineWidth',1); % Plot lower -3 SD line in red
    title(['Rho/FFE Medial Differences', newline, 'Max: ', num2str(dmaxmrf), ' Min: ', num2str(dminmrf)], 'FontSize',16,'FontWeight','bold'); % Set subplot title with max/min
    legend([plot1, plot2, plot3], {'Posterior', 'Center', 'Anterior'}); % Add legend for regions
    %
    %
    nexttile; % Select fourth subplot
    %plot(dthkmtf,'k.');
    hold on; % Keep current plot active
    %plot(axlim(1:2),[0 0],'k-');
    plot1 = plot(dthkmtf(imed(:,1)),'r.'); % Plot T2S-T1FFE medial posterior differences in red
    plot2 = plot(dthkmtf(imed(:,2)),'.','Color','#00c04b'); % Plot T2S-T1FFE medial central differences in green
    plot3 = plot(dthkmtf(imed(:,3)),'b.'); % Plot T2S-T1FFE medial anterior differences in blue
    ylim([-2 2]); % Set Y-axis limits
    axlim = axis; % Get current axis limits
    plot(axlim(1:2),[dmeanmtf dmeanmtf],'b','LineWidth',1); % Plot mean difference as blue line
    plot(axlim(1:2),[dmeanmtf+3*dstdmtf dmeanmtf+3*dstdmtf],'r--','LineWidth',1); % Plot upper 3 SD line in red
    plot(axlim(1:2),[dmeanmtf-3*dstdmtf dmeanmtf-3*dstdmtf],'r--','LineWidth',1); % Plot lower -3 SD line in red
    title(['T2S/FFE Medial Differences', newline, 'Max: ', num2str(dmaxmtf), ' Min: ', num2str(dminmtf)], 'FontSize',16,'FontWeight','bold'); % Set subplot title with max/min
    legend([plot1, plot2, plot3], {'Posterior', 'Center', 'Anterior'}); % Add legend for regions
    %
    jj=0; % Initialize region counter for ROI processing
    % Write Thicknesses to CSV Spreadsheet
    for k = 1:6 % Loop through six regions of interest (ROIs)
        output = fullfile(rdir,roi(k)); % Construct output Excel file path for ROI
        if i==1 && exist(output,'file')==2 % Check if first subject and Excel file exists
            delete(output); % Delete existing Excel file
        end
        %
        col_header1 = {'Subject'}; % Define column header for subject ID
        col_header2 = {'ScanType'}; % Define column header for scan type
        col_header3 = {'Compartment'}; % Define column header for compartment
        col_header4 = {'Division'}; % Define column header for division
        %
        if rem(k,2) == 1 % Check if k is odd (lateral ROIs)
            cthkf = cthklf_v; % Assign T1FFE lateral thicknesses
            cthkr = cthklr_v; % Assign T1rho lateral thicknesses
            cthkt = cthklt_v; % Assign T2S lateral thicknesses
            coord = coordl; % Assign lateral coordinates
            roi_idx = ilat; % Assign lateral region indices
            jj = jj+1; % Increment region counter
            cmprt = 0; % Set compartment to lateral (0)
            if rem(jj,3) == 1 % Check if posterior region
                division = 0; % Set division to posterior (0)
            elseif rem(jj,3) == 2 % Check if central region
                division = 1; % Set division to central (1)
            elseif rem(jj,3) == 0 % Check if anterior region
                division = 2; % Set division to anterior (2)
            end
        elseif rem(k,2) == 0 % If k is even (medial ROIs)
            cthkf = cthkmf_v; % Assign T1FFE medial thicknesses
            cthkr = cthkmr_v; % Assign T1rho medial thicknesses
            cthkt = cthkmt_v; % Assign T2S medial thicknesses
            coord = coordm; % Assign medial coordinates
            roi_idx = imed; % Assign medial region indices
            cmprt = 1; % Set compartment to medial (1)
            if rem(jj,3) == 1 % Check if posterior region
                division = 0; % Set division to posterior (0)
            elseif rem(jj,3) == 2 % Check if central region
                division = 1; % Set division to central (1)
            elseif rem(jj,3) == 0 % Check if anterior region
                division = 2; % Set division to anterior (2)
            end
        end
        %
        if i == 1 % Check if first subject
            if size(roi_idx) < 16385 % Check if ROI indices fit within Excel column limit
                col_header5 = repmat('pt_', size(coord(roi_idx(:,jj)),1),1); % Create point prefix for column headers
                col_header5 = [col_header5 int2str(coord(roi_idx(:,jj)))]; % Append coordinate indices to headers
                col_header5 = string(col_header5); % Convert headers to string array
                col_header5 = col_header5'; % Transpose headers for column orientation
            else % If ROI indices exceed Excel limit
                error([' *** ERROR: DATA EXCEEDS TOTAL NUMBER OF COLUMNS AVAILABLE IN EXCEL SHEET']); % Throw error
            end
            %
            writecell(col_header1,output,'Range','A1'); % Write subject header to Excel
            writecell(col_header2,output,'Range','B1'); % Write scan type header to Excel
            writecell(col_header3,output,'Range','C1'); % Write compartment header to Excel
            writecell(col_header4,output,'Range','D1'); % Write division header to Excel
            writematrix(col_header5,output,'Range','E1'); % Write point headers to Excel
        end
        %
        writematrix(str2double(fstr(1:3)),output,'Range',['A' int2str(i+1+ii)]); % Write subject ID to Excel
        writematrix(0,output,'Range',['B' int2str(i+1+ii)]); % Write T1FFE scan type (0) to Excel
        writematrix(cmprt,output,'Range',['C' int2str(i+1+ii)]); % Write compartment to Excel
        writematrix(division,output,'Range',['D' int2str(i+1+ii)]); % Write division to Excel
        writematrix(cthkf(roi_idx(:,jj))',output,'Range',['E' int2str(i+1+ii)]); % Write T1FFE thicknesses to Excel
        writematrix(str2double(fstr(1:3)),output,'Range',['A' int2str(i+2+ii)]); % Write subject ID to Excel
        writematrix(1,output,'Range',['B' int2str(i+2+ii)]); % Write T1rho scan type (1) to Excel
        writematrix(cmprt,output,'Range',['C' int2str(i+2+ii)]); % Write compartment to Excel
        writematrix(division,output,'Range',['D' int2str(i+2+ii)]); % Write division to Excel
        writematrix(cthkr(roi_idx(:,jj))',output,'Range',['E' int2str(i+2+ii)]); % Write T1rho thicknesses to Excel
        writematrix(str2double(fstr(1:3)),output,'Range',['A' int2str(i+3+ii)]); % Write subject ID to Excel
        writematrix(2,output,'Range',['B' int2str(i+3+ii)]); % Write T2S scan type (2) to Excel
        writematrix(cmprt,output,'Range',['C' int2str(i+3+ii)]); % Write compartment to Excel
        writematrix(division,output,'Range',['D' int2str(i+3+ii)]); % Write division to Excel
        writematrix(cthkt(roi_idx(:,jj))',output,'Range',['E' int2str(i+3+ii)]); % Write T2S thicknesses to Excel
        %
    end
    set(f, 'units','normalized','outerposition',[0 0 1 1]); % Maximize figure window to full screen
    exportgraphics(f, pic_nam, "Resolution", 300, 'Append', true); % Append figure to PDF with 300 DPI resolution
    close(f); % Close current figure
    %
    ii = ii+2; % Increment Excel row offset by 2
end
%
%%
n_rflat = sum(~isnan(cthkld_rf),3); % Count non-NaN T1rho-T1FFE lateral thickness differences
idxn = find(n_rflat<3); % Find indices where subject count is less than 3
n_rflat(idxn) = NaN; % Set low-count indices to NaN
avg_rflat = mean(cthkld_rf,3,"omitnan"); % Calculate mean T1rho-T1FFE lateral thickness differences
avg_rflat(idxn) = NaN; % Set low-count mean values to NaN
std_rflat = std(cthkld_rf,0,3,"omitnan"); % Calculate standard deviation of T1rho-T1FFE lateral thickness differences
std_rflat(idxn) = NaN; % Set low-count standard deviations to NaN
%
n_tflat = sum(~isnan(cthkld_tf),3); % Count non-NaN T2S-T1FFE lateral thickness differences
idxn = find(n_tflat<3); % Find indices where subject count is less than 3
n_tflat(idxn) = NaN; % Set low-count indices to NaN
avg_tflat = mean(cthkld_tf,3,"omitnan"); % Calculate mean T2S-T1FFE lateral thickness differences
avg_tflat(idxn) = NaN; % Set low-count mean values to NaN
std_tflat = std(cthkld_tf,0,3,"omitnan"); % Calculate standard deviation of T2S-T1FFE lateral thickness differences
std_tflat(idxn) = NaN; % Set low-count standard deviations to NaN
%
n_rfmed = sum(~isnan(cthkmd_rf),3); % Count non-NaN T1rho-T1FFE medial thickness differences
idxn = find(n_rfmed<3); % Find indices where subject count is less than 3
n_rfmed(idxn) = NaN; % Set low-count indices to NaN
avg_rfmed = mean(cthkmd_rf,3,"omitnan"); % Calculate mean T1rho-T1FFE medial thickness differences
avg_rfmed(idxn) = NaN; % Set low-count mean values to NaN
std_rfmed = std(cthkmd_rf,0,3,"omitnan"); % Calculate standard deviation of T1rho-T1FFE medial thickness differences
std_rfmed(idxn) = NaN; % Set low-count standard deviations to NaN
%
n_tfmed = sum(~isnan(cthkmd_tf),3); % Count non-NaN T2S-T1FFE medial thickness differences
idxn = find(n_tfmed<3); % Find indices where subject count is less than 3
n_tfmed(n_tfmed<3) = NaN; % Set low-count indices to NaN
avg_tfmed = mean(cthkmd_tf,3,"omitnan"); % Calculate mean T2S-T1FFE medial thickness differences
avg_tfmed(idxn) = NaN; % Set low-count mean values to NaN
std_tfmed = std(cthkmd_tf,0,3,"omitnan"); % Calculate standard deviation of T2S-T1FFE medial thickness differences
std_tfmed(idxn) = NaN; % Set low-count standard deviations to NaN
%
rflat1 = mean(avg_rflat(ilat(:,1)),"omitnan"); % Calculate mean T1rho-T1FFE lateral posterior difference
rflat2 = mean(avg_rflat(ilat(:,2)),"omitnan"); % Calculate mean T1rho-T1FFE lateral central difference
rflat3 = mean(avg_rflat(ilat(:,3)),"omitnan"); % Calculate mean T1rho-T1FFE lateral anterior difference
tflat1 = mean(avg_tflat(ilat(:,1)),"omitnan"); % Calculate mean T2S-T1FFE lateral posterior difference
tflat2 = mean(avg_tflat(ilat(:,2)),"omitnan"); % Calculate mean T2S-T1FFE lateral central difference
tflat3 = mean(avg_tflat(ilat(:,3)),"omitnan"); % Calculate mean T2S-T1FFE lateral anterior difference
rfmed1 = mean(avg_rfmed(imed(:,1)),"omitnan"); % Calculate mean T1rho-T1FFE medial posterior difference
rfmed2 = mean(avg_rfmed(imed(:,2)),"omitnan"); % Calculate mean T1rho-T1FFE medial central difference
rfmed3 = mean(avg_rfmed(imed(:,3)),"omitnan"); % Calculate mean T1rho-T1FFE medial anterior difference
tfmed1 = mean(avg_tfmed(imed(:,1)),"omitnan"); % Calculate mean T2S-T1FFE medial posterior difference
tfmed2 = mean(avg_tfmed(imed(:,2)),"omitnan"); % Calculate mean T2S-T1FFE medial central difference
tfmed3 = mean(avg_tfmed(imed(:,3)),"omitnan"); % Calculate mean T2S-T1FFE medial anterior difference
%
% 3 - 10 Colormap for Number of Subjects
cmap=[0 0.8 1; 0.2 1 0.8; 0.6 1 0.4; 1 1 0; 1 0.6 0; 1 0.4 0; 1 0 0; 0.6 0 0]; % Define colormap for subject counts
%
f = figure; % Create new figure for plotting
t = tiledlayout(3,2); % Create 3x2 tiled layout for subplots
title(t,'Tibial Cartilage Thickness Differences','FontSize',20,'FontWeight','bold'); % Add main title
orient landscape; % Set figure orientation to landscape
%
hf1 = nexttile; % Select first subplot
patch(xgl(quadl'),ygl(quadl'),avg_rflat(quadl'),'FaceColor','interp','EdgeColor','interp'); % Plot T1rho-T1FFE lateral mean differences
hold on; % Keep current plot active
patch(xgm(quadm'),ygm(quadm'),avg_rfmed(quadm'),'FaceColor','interp','EdgeColor','interp'); % Plot T1rho-T1FFE medial mean differences
view(-90,90); % Set view to top-down (XY plane)
axis equal; % Set equal scaling for axes
%
colormap(hf1,parula); % Set parula colormap
hf1.CLim = [-1.5 1.5]; % Set color limits for mean differences
colorbar; % Add colorbar
%
xlim(hf1,[-30 30]); % Set X-axis limits
ylim(hf1,[-40 40]); % Set Y-axis limits
%
axlim=axis; % Get current axis limits
plot([reg_lat1_all reg_lat1_all],[axlim(4) 0],"k",'LineWidth',1.5); % Plot first lateral division line
plot([reg_lat2_all reg_lat2_all],[axlim(4) 0],"k",'LineWidth',1.5); % Plot second lateral division line
plot([reg_med1_all reg_med1_all],[0 axlim(3)],"k",'LineWidth',1.5); % Plot first medial division line
plot([reg_med2_all reg_med2_all],[0 axlim(3)],"k",'LineWidth',1.5); % Plot second medial division line
%
axis off; % Hide axes
box off; % Hide box outline
%
hf2 = nexttile; % Select second subplot
patch(xgl(quadl'),ygl(quadl'),avg_tflat(quadl'),'FaceColor','interp','EdgeColor','interp'); % Plot T2S-T1FFE lateral mean differences
hold on; % Keep current plot active
patch(xgm(quadm'),ygm(quadm'),avg_tfmed(quadm'),'FaceColor','interp','EdgeColor','interp'); % Plot T2S-T1FFE medial mean differences
view(-90,90); % Set view to top-down (XY plane)
axis equal; % Set equal scaling for axes
%
colormap(hf2,parula); % Set parula colormap
hf2.CLim = [-1.5 1.5]; % Set color limits for mean differences
colorbar; % Add colorbar
%
xlim(hf2,[-30 30]); % Set X-axis limits
ylim(hf2,[-40 40]); % Set Y-axis limits
%
axlim=axis; % Get current axis limits
plot([reg_lat1_all reg_lat1_all],[axlim(4) 0],"k",'LineWidth',1.5); % Plot first lateral division line
plot([reg_lat2_all reg_lat2_all],[axlim(4) 0],"k",'LineWidth',1.5); % Plot second lateral division line
plot([reg_med1_all reg_med1_all],[0 axlim(3)],"k",'LineWidth',1.5); % Plot first medial division line
plot([reg_med2_all reg_med2_all],[0 axlim(3)],"k",'LineWidth',1.5); % Plot second medial division line
%
axis off; % Hide axes
box off; % Hide box outline
%
hf3 = nexttile; % Select third subplot
patch(xgl(quadl'),ygl(quadl'),std_rflat(quadl'),'FaceColor','interp','EdgeColor','interp'); % Plot T1rho-T1FFE lateral standard deviations
hold on; % Keep current plot active
patch(xgm(quadm'),ygm(quadm'),std_rfmed(quadm'),'FaceColor','interp','EdgeColor','interp'); % Plot T1rho-T1FFE medial standard deviations
view(-90,90); % Set view to top-down (XY plane)
axis equal; % Set equal scaling for axes
title('Rho - T1FFE','Standard Deviatons','FontSize',14,'FontWeight','bold'); % Set subplot title
hf3.CLim = [0 1.5]; % Set color limits for standard deviations
colormap(hf3,jet); % Set jet colormap
colorbar(hf3,'Ticks', 0:.25:1.5); % Add colorbar with ticks
xlim(hf3,[-30 30]); % Set X-axis limits
ylim(hf3,[-40 40]); % Set Y-axis limits
%
axlim=axis; % Get current axis limits
plot([reg_lat1_all reg_lat1_all],[axlim(4) 0],"k",'LineWidth',1.5); % Plot first lateral division line
plot([reg_lat2_all reg_lat2_all],[axlim(4) 0],"k",'LineWidth',1.5); % Plot second lateral division line
plot([reg_med1_all reg_med1_all],[0 axlim(3)],"k",'LineWidth',1.5); % Plot first medial division line
plot([reg_med2_all reg_med2_all],[0 axlim(3)],"k",'LineWidth',1.5); % Plot second medial division line
%
hf4 = nexttile; % Select fourth subplot
patch(xgl(quadl'),ygl(quadl'),std_tflat(quadl'),'FaceColor','interp','EdgeColor','interp'); % Plot T2S-T1FFE lateral standard deviations
hold on; % Keep current plot active
patch(xgm(quadm'),ygm(quadm'),std_tfmed(quadm'),'FaceColor','interp','EdgeColor','interp'); % Plot T2S-T1FFE medial standard deviations
view(-90,90); % Set view to top-down (XY plane)
axis equal; % Set equal scaling for axes
title('T2S - T1FFE','Standard Deviatons','FontSize',14,'FontWeight','bold'); % Set subplot title
hf4.CLim = [0 1.5]; % Set color limits for standard deviations
colormap(hf4,jet); % Set jet colormap
colorbar(hf4,'Ticks', 0:.25:1.5); % Add colorbar with ticks
xlim(hf4,[-30 30]); % Set X-axis limits
ylim(hf4,[-40 40]); % Set Y-axis limits
%
axlim=axis; % Get current axis limits
plot([reg_lat1_all reg_lat1_all],[axlim(4) 0],"k",'LineWidth',1.5); % Plot first lateral division line
plot([reg_lat2_all reg_lat2_all],[axlim(4) 0],"k",'LineWidth',1.5); % Plot second lateral division line
plot([reg_med1_all reg_med1_all],[0 axlim(3)],"k",'LineWidth',1.5); % Plot first medial division line
plot([reg_med2_all reg_med2_all],[0 axlim(3)],"k",'LineWidth',1.5); % Plot second medial division line
%
hf5 = nexttile; % Select fifth subplot
patch(xgl(quadl'),ygl(quadl'),n_rflat(quadl'),'FaceColor','interp','EdgeColor','interp'); % Plot T1rho-T1FFE lateral subject counts
hold on; % Keep current plot active
patch(xgm(quadm'),ygm(quadm'),n_rfmed(quadm'),'FaceColor','interp','EdgeColor','interp'); % Plot T1rho-T1FFE medial subject counts
view(-90,90); % Set view to top-down (XY plane)
axis equal; % Set equal scaling for axes
title('Rho - T1FFE','Subject Numbers','FontSize',14,'FontWeight','bold'); % Set subplot title
%
hf5.CLim=[2 10]; % Set color limits for subject counts
colormap(hf5,cmap); % Set custom colormap for subject counts
colorbar(hf5,'Ticks', 2.5:9.5, 'TickLabels', ["3" "4" "5" "6" "7" "8" "9" "10"], 'TickLength', 0); % Add colorbar with custom ticks
xlim(hf5,[-30 30]); % Set X-axis limits
ylim(hf5,[-40 40]); % Set Y-axis limits
%
hf6 = nexttile; % Select sixth subplot
patch(xgl(quadl'),ygl(quadl'),n_tflat(quadl'),'FaceColor','interp','EdgeColor','interp'); % Plot T2S-T1FFE lateral subject counts
hold on; % Keep current plot active
patch(xgm(quadm'),ygm(quadm'),n_tfmed(quadm'),'FaceColor','interp','EdgeColor','interp'); % Plot T2S-T1FFE medial subject counts
view(-90,90); % Set view to top-down (XY plane)
axis equal; % Set equal scaling for axes
title('T2S - T1FFE','Subject Numbers','FontSize',14,'FontWeight','bold'); % Set subplot title
%
hf6.CLim=[2 10]; % Set color limits for subject counts
colormap(hf6,cmap); % Set custom colormap for subject counts
colorbar(hf6,'Ticks', 2.5:9.5, 'TickLabels', ["3" "4" "5" "6" "7" "8" "9" "10"], 'TickLength', 0); % Add colorbar with custom ticks
xlim(hf6,[-30 30]); % Set X-axis limits
ylim(hf6,[-40 40]); % Set Y-axis limits
%
set(f, 'units','normalized','outerposition',[0 0 1 1]); % Maximize figure window to full screen
exportgraphics(f, pic_nam, "Resolution", 300, 'Append', true); % Append figure to PDF with 300 DPI resolution
close(f); % Close current figure
return % Exit the script
